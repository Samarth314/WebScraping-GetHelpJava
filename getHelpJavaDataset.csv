,Name,Categories,Tags,Replies,Views,Post,Comments
0,[README] Introduction to Javascript,Get Help - Java,,2,1377,"
Welcome to Introduction to JavaScript

JavaScript is an essential web technology, adding interactivity to the structure and style of HTML and CSS. This forum category covers broader discussion about JavaScript related topics.
This course contains the following Sections/Lessons:

Introduction

Introduction to JavaScript
Variables


Conditionals

Conditional Statements


Functions

Functions


Scope

Scope


Learn JavaScript: Arrays

Arrays


Learn JavaScript: Loops

Loops


Learn JavaScript: Iterators

Higher-Order Functions
Iterators


Learn JavaScript: Objects

Objects
Advanced Objects


Learn JavaScript: Classes

Classes


Learn JavaScript: Browser Compatibility and Transpilation

Browser Compatibility and Transpilation


Learn JavaScript: Modules

Intermediate JavaScript Modules


JavaScript Promises

JavaScript Promises


JavaScript Async-Await

Async Await


Learn JavaScript: Requests

Requests I
Requests II




Topics in this course, By section:

Introduction
Conditionals
Functions
Scope
Learn JavaScript: Arrays
Learn JavaScript: Loops
Learn JavaScript: Iterators
Learn JavaScript: Objects
Learn JavaScript: Classes
Learn JavaScript: Browser Compatibility and Transpilation
Learn JavaScript: Modules
JavaScript Promises
JavaScript Async-Await
Learn JavaScript: Requests

Projects in Javascript

All Project topics belong in the category #project
Sort By:

Wanderlust
Mini Linter
Chore Door
Kelvin Weather
Meal Maker
Rock, Paper or Scissors

Sleep Debt Calculator
Just to mention a few


FAQ’s
View all
Sort By

Arrays
Classes
Loops
Intro to JSX

Q & A’s
View all
More resources from Codecademy
Module Key Concepts

Introduction
Conditionals
Functions
Scope
Arrays
Loops
Iterators
Objects
Classes
Browser Compatibility and Transpilation
Modules
 Promises
Async-Await
Requests

Articles:

JavaScript Glossary
JavaScript Versions: ES6 and Before
HTTP Requests
JavaScript Reference

","
"
1,"Why does the debugger return this error in the Rock, Paper and Scissors game?",Get Help - Java,"functions,general",1,6,"
In the Rock, Paper and Scissors game, I kept getting the same error when I would run this code:
function determineWinner (userChoice, computerChoice) {
  if (userChoice === computerChoice) {
    return 'Tie';
  } 
  else if (userChoice === 'rock') {
      if (computerChoice === 'paper') {
        return 'Computer wins!';
      } else {
        return 'You win!';
      }
  else if (userChoice === 'paper') {
      if (computerChoice === 'scissors') {
        return 'Computer wins!';
      } else {
        return 'You win!';
      }
  else (userChoice === 'scissors') {
      if (computerChoice === 'rock') {
        return 'Computer wins!';
      } else {
        return 'You win!';
      }
  }
}

The console would return the following error:
/home/ccuser/workspace/javascript_101_Unit_3/Unit_3/rockPaperScissors.js:75
});
 ^
SyntaxError: Unexpected token )
    at createScript (vm.js:53:10)
    at Object.runInThisContext (vm.js:95:10)
    at Module._compile (module.js:543:28)
    at Object.Module._extensions..js (module.js:580:10)
    at Module.load (module.js:488:32)
    at tryModuleLoad (module.js:447:12)
    at Function.Module._load (module.js:439:3)
    at Module.runMain (module.js:605:10)
    at run (bootstrap_node.js:427:7)
    at startup (bootstrap_node.js:151:9)

It says “line 75”, but I only had 74 lines, and the code causing the error was 20 lines above the last line I’d typed. I had to watch a video to figure out what I did wrong, and it turns out that my nesting brackets were incorrect. Here is the successful code:
function determineWinner (userChoice, computerChoice) {
  if (userChoice === computerChoice) {
    return 'Tie';
  } 
  if (userChoice === 'rock') {
      if (computerChoice === 'paper') {
        return 'Computer wins!';
      } else {
        return 'You win!';
      }
  }
  if (userChoice === 'paper') {
      if (computerChoice === 'scissors') {
        return 'Computer wins!';
      } else {
        return 'You win!';
      }
  }
 if (userChoice === 'scissors') {
      if (computerChoice === 'rock') {
        return 'Computer wins!';
      } else {
        return 'You win!';
      }
  }
}

My question is, why did my code generate an error saying there was an unexpected token on line 75, when line 75 didn’t exist, and the error was actually many lines above? Are nesting problems known to cause this error?
",
2,"Rock, Paper and scissors game unexpected error",Get Help - Java,functions,4,15,"


gist.github.com


https://gist.github.com/codecademydev/ee39e6b4b6a77af1d698208058fb9334
rockPaperScissors.js
/* Game: Rock,Paper and Scissors*/
//------------------------------------------------------------------------------
/*Function for checking whether the user has given a valid input or not. And
  also announcing winner if user inputs a secret code. */

const getUserChoice = userInput => {
  userInput = userInput.toLowerCase();
  if (userInput === 'rock' || userInput === 'paper' || userInput === 'scissors') {
    return userInput;
  } else if (userInput==='bomb') {
This file has been truncated. show original







Here is the link of my Code… please reply what’s the mistake I have been making.
Thanks for your feedback.    
","
Hi! Thanks for sharing your code and welcome to the forums 
What is the error the console is giving you?

Welcome to the forums!



 web1601424080:

Here is the link of my Code… please reply what’s the mistake I have been making.


Can you tell us what the “unexpected error” you’re seeing is? 
Edit: Darn it @toastedpitabread, you and your speedy typing! 

I’m just quick to not understand  
"
3,Battle system,Get Help - Java,"functions,general",1,14,"
Hi, so im planning on making a rpg battle game, the problem is the fight continues even though one player has less then zero health.  Then it randomly stops after a certain amount of time.  Can you help? Thank you in advance…
<button id=""myBtn"" onclick='attack()'>Primary Weapon</button>
<button>Secondary Weapon</button>
<p id='playerHealth'></p>
<p id='enemyHealth'></p>
<p id='playerDamage'></p>
<p id='dragonDamage'></p>
<button onclick='restart()'>Restart Battle</button>


let player = 50;
let dragon = 30;

document.getElementById('playerHealth').innerText = player;
document.getElementById('enemyHealth').innerText = dragon;

function attack() {
  
  let playerAccuracy = Math.floor(Math.random()* 5 + 1);
  let playerAttackDamage = Math.floor(Math.random()* 20 + 1);
  if(player <= 0) {
    document.getElementById('playerDamage').innerText = 'You Lose';
    document.getElementById(""myBtn"").disabled = true;
  } else if(playerAccuracy > 1) {
    dragon -= playerAttackDamage;
    document.getElementById('enemyHealth').innerText = dragon;
    document.getElementById('playerDamage').innerText = 'You hit the dragon for ' + playerAttackDamage;
  } else if (playerAccuracy < 3) {
    document.getElementById('playerDamage').innerText = 'You Missed';
  }
  dragonAttack()
};

function dragonAttack() {
  
  let dragonAccuracy = Math.floor(Math.random()* 5 + 1);
  let dragonAttackDamage = Math.floor(Math.random()* 20 + 1);
  if(dragonAccuracy > 3 ) {
    player -= dragonAttackDamage;
    document.getElementById('playerHealth').innerText = player;
    document.getElementById('dragonDamage').innerText = 'The dragon hit you for ' + dragonAttackDamage;
  } else if (dragonAccuracy < 3) {
    document.getElementById('dragonDamage').innerText = 'The dragon missed';
  } else if(dragon <= 0 ) {
    document.getElementById('dragonDamage').innerText = 'You Won';
    document.getElementById(""myBtn"").disabled = true;
  }
};

function restart () {
  document.getElementById(""myBtn"").disabled = false;
  let player = 50;
  let dragon = 30;
   document.getElementById('playerHealth').innerText = player;
   document.getElementById('enemyHealth').innerText = dragon;
}

",
4,Sometimes the videos sound is not adequate,Get Help - Java,general,12,179,"
Hi
I think that the the videos’ sound sometimes is not adequate. The modulation of the voice is too high, and that doesn’t help understanding it. I hope you can correct this issue.
Thanks
Jaime Fernandez
","
Hi @byte970888776,
Please post a link to one or several of the videos in which the sound quality is inadequate so that we can investigate the problem. Thanks for alerting us to this issue.

Hi
This is one. The sound is a bit too low https://www.codecademy.com/courses/learn-html/projects/form-a-story Thanks
Jaime Fernandez

I have reported it, and asked Codecademy staff to look into this. Thank you.

Hi
This is another. The sound is a bit too low https://www.codecademy.com/courses/learn-css/lessons/css-visual-rules/exercises/review-visual-rules Thanks
Jaime Fernandez

Hi
This is another. The sound is a bit too low
https://www.codecademy.com/articles/visual-studio-code
Thanks
Jaime Fernandez
Hi
This is another. The sound is a bit too low https://www.codecademy.com/courses/learn-css/lessons/css-visual-rules/exercises/review-visual-rules Thanks
Jaime Fernandez

CC staff, please check the aforementioned videos out regarding sound volume and quality.
Thanks! 

Another one https://www.codecademy.com/courses/learn-css/videos/the-box-model-in-devtools

2 posts were split to a new topic: CSS Display and Positioning

Hi
This is one. The sound is a bit too low
https://www.codecademy.com/courses/make-a-website/lessons/setting-up-your-domain/exercises/hosting-your-site Thanks
Jaime Fernandez
You didn’t answer to my previous mail. I hope you can help me
Hi
I hope you can help me. I tried to change the code in
https://www.codecademy.com/courses/learn-css/lessons/css-display-positioning/exercises/review-css-display-positioning
but it only worked for question 1. I couldn’t fix the remaining questions. Can you tell me what’s wrong or who could explain me? Sometimes CSS is somewhat misterious. Thanks
Jaime Fernandez
Index.html



Please Participate in Our Survey!






Question 1
Question 2
Question 3
Question 4
Question 5



Welcome to our survey!
We're looking forward to getting your answers so we can make sure our products and services are the best they can be!



Question 1
I like participating in physical activity such as running, swimming, or biking.


Disagree


Neutral


Agree




Question 2
I try to keep up to date with the latest fashion in active wear.


Disagree


Neutral


Agree



Question 3
I purchase clothing online regularly.

Disagree


Neutral


Agree



Question 4
I try to buy goods that are designed and/or manufactured in my home country.

Disagree


Neutral


Agree



Question 5
I look to famous athletes when trying to choose what to wear when training.

Disagree


Neutral


Agree


Thanks for taking our survey!
Style.css
body {
background-color: #FFF;
margin: 0 auto;
}
header {
background-color: #466995;
border-bottom: 1px solid #466995;
position:fixed;
z-index:10;
width:100%;
}
ul {
margin: 30px auto;
padding: 0 20px;
text-align: center;
}
li {
color: #FFF;
font-family: ‘Oswald’, sans-serif;
font-size: 16px;
font-weight: 300;
text-transform: uppercase;
display: inline-block;
width: 80px;
}
li:hover {
color: #DBE9EE;
}
h1 {
color: #466995;
font-family: ‘Oswald’, sans-serif;
font-size: 32px;
font-weight: 300;
text-transform: uppercase;
}
h2 {
color: #333;
font-family: ‘Varela Round’, sans-serif;
font-size: 26px;
font-weight: 100;
margin: 0 auto 20px auto;
}
h3 {
color: #466995;
font-family: ‘Oswald’, sans-serif;
font-size: 18px;
text-align: center;
font-weight: 700;
text-transform: uppercase;
padding: 30px;
}
h4 {
color: #466995;
font-family: ‘Oswald’, sans-serif;
font-size: 18px;
font-weight: 300;
letter-spacing: 2px;
text-align: center;
text-transform: uppercase
}
p {
color: #333;
font-family: ‘Varela Round’, sans-serif;
font-size: 18px;
}
footer {
background-color: #DBE9EE;
text-align: center;
position:relative;
top:100px;
height:100px;
}
.welcome {
background-color: #DBE9EE;
box-sizing: border-box;
padding: 40px;
text-align: center;
width: 100%;
position:relative;
top:100px;
}
.question {
text-align: center;
position: relative;
top: 100px;
}
.inner {
display:inline-block;
width:500;
}
.answer {
border: 1px solid #466995;
margin: 20px;
display:inline-block;
float:right;
}
.answer:hover {
background: #C0D6DF;
color: #FFF;
}
Hi
I hope you can help me. I tried to change the code in
https://www.codecademy.com/courses/learn-css/lessons/css-display-positioning/exercises/review-css-display-positioning
but it only worked for question 1. I couldn’t fix the remaining questions. Can you tell me what’s wrong or who could explain me? Sometimes CSS is somewhat misterious. Thanks
Jaime Fernandez
Another one https://www.codecademy.com/courses/learn-css/videos/the-box-model-in-devtools

Hi there.
Your question about the CSS was moved to a separate topic as it isn’t related to the topic being discussed here, which is the audio level. 

"
5,Piano Keys Project HELP!,Get Help - Java,general,6,94,"
Hi, I’m starting the Piano Keys project which is focused on DOM events, and I’m already confused at steps 4-6. I don’t understand why we do this:
// Write a named function with event handler properties
const eventAssignment = (note) => { 
  note.onmousedown = function() {
    keyPlay(event);
  };
  note.onmouseup = function() {
    keyReturn(event);
  };
}

// Write a loop that runs the array elements through the function
notes.forEach(eventAssignment);

My original idea was to do this:
const eventAssignment = (note) => {
  note.onmousedown = keyPlay;
  note.onmouseup = keyReturn;
}

notes.forEach(function(key) {
  eventAssignment(key);
});

Need help!!!
Here’s the full HTML and Javascript files:
Javascript:
// The keys and notes variables store the piano keys
const keys = ['c-key', 'd-key', 'e-key', 'f-key', 'g-key', 'a-key', 'b-key', 'high-c-key', 'c-sharp-key', 'd-sharp-key', 'f-sharp-key', 'g-sharp-key', 'a-sharp-key'];
const notes = [];
keys.forEach(function(key){
  notes.push(document.getElementById(key));
})

// Write named functions that change the color of the keys below
const keyPlay = (event) => {
  event.target.style.backgroundColor = 'pink';
}

const keyReturn = (event) => {
  event.target.style.backgroundColor = '';
} 

// Write a named function with event handler properties
const eventAssignment = (note) => { 
  note.onmousedown = function() {
    keyPlay(event);
  };
  note.onmouseup = function() {
    keyReturn(event);
  };
}

// Write a loop that runs the array elements through the function
notes.forEach(eventAssignment);

// These variables store the buttons that progress the user through the lyrics
let nextOne = document.getElementById('first-next-line');
let nextTwo = document.getElementById('second-next-line');
let nextThree = document.getElementById('third-next-line');
let startOver = document.getElementById('fourth-next-line');

// This variable stores the '-END' lyric element
let lastLyric = document.getElementById('column-optional');

// These statements are ""hiding"" all the progress buttons, but the first one
nextTwo.hidden = true;
nextThree.hidden = true;
startOver.hidden= true;

// Write anonymous event handler property and function for the first progress button


// Write anonymous event handler property and function for the second progress button


// Write anonymous event handler property and function for the third progress button


// This is the event handler property and function for the startOver button
startOver.onclick = function() {
  nextOne.hidden = false;
  startOver.hidden = true;
   document.getElementById('word-one').innerHTML = 'HAP-';
  document.getElementById('letter-note-one').innerHTML = 'G';
  document.getElementById('word-two').innerHTML = 'PY';
  document.getElementById('letter-note-two').innerHTML = 'G';
  document.getElementById('word-three').innerHTML = 'BIRTH-';
  document.getElementById('letter-note-three').innerHTML = 'A';
  document.getElementById('word-four').innerHTML = 'DAY';
  document.getElementById('letter-note-four').innerHTML = 'G';
  document.getElementById('word-five').innerHTML = 'TO';
  document.getElementById('letter-note-five').innerHTML = 'C';
  document.getElementById('word-six').innerHTML = 'YOU!';
  document.getElementById('letter-note-six').innerHTML = 'B';
}

HTML:
<!DOCTYPE html>
<html lang=""en"" >

<head>
  <meta charset=""UTF-8"">
  <link rel=""stylesheet"" href=""style.css"">
</head>

<body>
  <p class='title'>Piano Player</p>
  <p id='demo'>Follow the song below to play  the piano.</p>
  <section class=""piano"">
    <section id='c-key' class=""key"">
      <section class='keynote'>C</section>
    </section>
    <section id='c-sharp-key' class=""black-key"">
      <section class='black-keynote'>C#</section>
    </section>
    <section id='d-key' class=""key"">
      <section class='keynote'>D</section>
    </section>
    <section id='d-sharp-key' class=""black-key"">
      <section class='black-keynote'>D#</section>
    </section>
    <section id='e-key' class=""key"">
      <section class='keynote'>E</section>
    </section>
    <section id='f-key' class=""key"">
      <section class='keynote'>F</section>
    </section>
    <section id='f-sharp-key' class=""black-key"">
      <section class='black-keynote'>F#</section>
    </section>
    <section id='g-key' class=""key"">
      <section class='keynote'>G</section>
    </section>
    <section id='g-sharp-key' class=""black-key"">
      <section class='black-keynote'>G#</section>
    </section>
    <section id='a-key' class=""key"">
      <section class='keynote'>A</section>
    </section>
    <section id='a-sharp-key' class=""black-key"">
      <section class='black-keynote'>A#</section>
    </section>
    <section id='b-key' class=""key"">
      <section class='keynote'>B</section>
    </section>
    <section id='high-c-key' class=""key"">
      <div class='keynote'>C</div>
    </section>
  </section>

  <section id='lyrics'>
    <section id='column-one'>
      <section id=""word-one"">HAP-</section>
      <section id=""letter-note-one"">G</section>
    </section>
    <section id='column-two'>
      <section id=""word-two"">PY</section>
      <section id=""letter-note-two"">G</section>
    </section>
    <section id='column-three'>
      <section id=""word-three"">BIRTH-</section>
      <section id=""letter-note-three"">A</section>
    </section>
    <section id='column-four'>
      <section id=""word-four"">DAY</section>
      <section id=""letter-note-four"">G</section>
    </section>
    <section id='column-five'>
      <section id=""word-five"">TO</section>
      <section id=""letter-note-five"">C</section>
    </section>
    <section id='column-six'>
      <section id=""word-six"">YOU</section>
      <section id=""letter-note-six"">B</section>
    </section>
    <section id='column-optional' class='column-optional'>
      <section id=""word-optional"">END</section>
      <section id=""letter-note-optional"">A</section>
    </section>

    <button id=""first-next-line"">Line 2</button>
    <button id=""second-next-line"">Line 3</button>
    <button id=""third-next-line"">Line 4</button>
    <button id=""fourth-next-line"">Reset</button>
  </section>

  <script  src=""main.js""></script>

</body>
</html>

","
hi
I am have the same concern why we dont call the function direct instead we are calling through another anonymous function.
const eventAssignment = (note) => { 
  note.onmousedown = function() {
    keyPlay(event);
  };
  note.onmouseup = function() {
    keyReturn(event);
  };
}

A little light on this matter please why the following is an issue
let eventAssignment = function(note){
  note.onmousedown = keyPlay;
  note.onmouseup = keyReturn;
  
}

kind regards

I don’t see where it says it needs to be in the specific format in your first example:
const eventAssignment = (note) => { 
  note.onmousedown = function() {
    keyPlay(event);
  };
  note.onmouseup = function() {
    keyReturn(event);
  };
}

The text just says:

Inside the function, create an event handler that runs the  keyPlay  as an event handler when a  mousedown  event fires on any  note .

I just interpreted that as:
const playNote = note => {
  note.addEventListener('mousedown', keyPlay);
  note.addEventListener('mouseup', keyReturn);
}

But what does it matter? You’re not validated on what you enter so complete the project how you see fit.

Hi
I was following the video Codeacademy provided for help in that video step 4 instructor mentioned clearly not to do that, Then i put the post asking what is the reason for that because my approach was the following after completing the exercise.
let eventAssignment = function (note) {
    note.onmousedown = keyPlay;
    note.onmouseup = keyReturn;
}

Following is the video link where he is explaining this point (like if we do this way it will redefine this function???) Did we cover this is in our course so far. How someone knows which way is the right way.
Step 4 
Cheers

Okay I see his point though in this particular scenario it doesn’t matter so much. Yeah I think it was covered before which is why you should use addEventListener where possible so you don’t redefine anything.
One sec, I’ll try and find the lesson
Edit: lesson found: link
It’s mentioned at the bottom though not in the exact same words as the guy in the video:

You’ll want to use the  .addEventListener()  method to allow multiple event handlers to be registered to a single event without changing its other event handlers.

Actually nevermind, I don’t get the video either. I confused myself with my own solution and what the video is doing.
I could be wrong but it looks like in the video he’s doing exactly what he said not to do. Isn’t assigning function() {} redefining the onmousedown property? I added another mousedown function in the same manner, and the bottom function takes precedence, the text changed and not the colour.
const playNote = note => {
  note.onmousedown = function() {
    keyPlay(event);
  }
  note.onmouseup = function() {
    keyReturn(event)
  }

  note.onmousedown = function() {
    note.innerHTML = '*';
  }
}


So use .addEventListener to keep it is simple. The videos CodeAcademy have uploaded sometimes there are new concept getting introduced so as a beginer no experience of the market (Junior) we have no idea what just happened. I dont mind they telling us in the video new things “like this is the way you can write this piece  of code”. But they should stick to the chapters we just have covered before that project (to complete the project).
Reason why in my case i have to finish the course quickly (i have timescale to finish this course). But when stuck somewhere becuase somthing new got introduced then how this happened i research for atleast a day to undetstand. One thing leads to another thing. I am writing all this feedback so upcoming videos the instructor need to know what concept he/she can introduced to write the code. If there is better way they introduce it but comment that extra piece of code.
example: syntax to write a function. Not sayig right same code 3 times but stick to the beginer level approach using previouse chapter knowledge.

function (){}
() =>{}
const myfunction = () => {};

thanks
"
6,School catalogue Project,Get Help - Java,learn-classes,3,36,"
I am getting an extra “undefined” value in my console.log on calling quickFacts on my instances. Couldn’t figure out the bug!!
class School {
constructor(name, level, numberOfStudents) {
this._name = name;

this._level = level;

this._numberOfStudents = numberOfStudents;

}
get name() {
return this._name;

}
get level() {
return this._level;

}
get numberOfStudents() {
return this._numberOfStudents;

}
set numberOfStudents(num) {
if(typeof num === 'number') {

this._numberOfStudents = num;

}

else {

  console.log('Invalid input: numberOfStudents must be set to a number.')

}

}
quickFacts() {
console.log(`${this.name} educates ${this.numberOfStudents} students at the ${this.level} school level.`);

}
static pickSubstituteTeacher(substituteTeacher) {
let randomIndex = Math.floor(Math.random() * substituteTeacher.length);

return substituteTeacher[randomIndex];

}
}
class Primary extends School {
constructor(name, numberOfStudents, pickupPolicy) {
super(name, 'primary', numberOfStudents);

this._pickupPolicy = pickupPolicy;

}
get pickupPolicy() {
return this._pickupPolicy;

}

}
class Middle extends School {
constructor(name, numberOfStudents) {
super(name, 'middle', numberOfStudents);

}
}
class High extends School {
constructor(name, numberOfStudents, sportsTeam) {
super(name, 'high', numberOfStudents);

this._sportsTeam = sportsTeam;

}
get sportsTeam() {
return this._sportsTeam;

}
}
const lorraineHansbury = new Primary(‘Lorraine Hansbury’, 514, ‘Students must be picked up by a parent, guardian, or a family member over the age of 13.’)
console.log(lorraineHansbury.quickFacts())
//Lorraine Hansbury educates 514 students at the primary school level.
undefined
","
Your quickFacts() method already logs the statement to the console and returns nothing, so there’s no need to log the call to the console. As the return value from the method is undefined, logging it to the console logs undefined. You can either change the method to return the statement, or you can just call the method without a console.log().

Thanks a lot for clarifying.
"
7,Understanding the NOT operator!,Get Help - Java,,59,12340,"
How could I negate the value of the entire statement with ! as per additional experementing advice? It’s not like with the previous example where there is a boolean set in variable. So how can I use the bang operator on the two comparisons to negate them?
","
we could simple use the bang operator at both conditions:
console.log( !false && !false );

or we can use the order of operations to our advantage:
console.log( !(false && false) );

parentheses are evaluated first, so the order is:
parentheses -> and operator -> bang operator




 netace85057:

So how can I use the bang operator


It is not a bang operator in JavaScript, but in Ruby. In JS it is the NOT operator.
Any truthy expression in any form will be cast to a boolean and negated, so will yield, false. The opposite will happen when we negate a falsy expression and will yield, true.

I have a query about the different positioning options of the not operator ! in an if() conditional statement, and the requirement (or not) of brackets, depending on the desired outcome. For example:
// both conditions T: prints pass

let x = 'blue';
let y = 5;

if (x === 'blue' && y <= 5) {
    console.log('pass');
} else {
    console.log('fail');
}

If we wanted to negate the whole conditional statement, could the above code be modified using either of the following?
// both conditions T, but ! reverses to F: prints fail
if (!(x === 'blue' && y <= 5))

or
// both conditions T, but ! reverses to F: prints fail
if (!x === 'blue' && y <= 5)

i.e. I get the same result with or without the brackets, so am I right to assume that, here, precedence rules mean that the brackets are optional? However, would use of the brackets be preferrable due to readability?
If instead of negating the whole conditional statement, we wanted to negate both conditions separately before applying the logical operator, could the code in our original example be modified using either of the following?
Note: I’ve also made the following additional two changes to the example:
(i) mathematical operator <= (less than or equal to) changed to > (greater than); and
(ii) logical operator && (and) changed to || (or).
// 1st condition F, 2nd condition T: prints pass
if (!(x === 'blue') || !(y > 5)) 

or
// 1st condition F, 2nd condition T: prints pass
if (x === !'blue' || y > !5) 

Even though my own ‘trial and error’ testing has given me the outcomes above, I want to check that all of these syntax alternatives are both valid and good practice, as I’m aware that my limited testing may not paint the whole picture.

a = true, b = true

In any configuration with AND, NOT will render as false.
! a && ! b    // <- false
! a && b      // <- false
a && ! b      // <- false
! (a && b)    // <- false

Different configurations with OR, not will render as false when applied to both operands, and true when applied to only one operand.
! a || ! b    // <- false
! (a || b)    // <- false

! a || b      // <- true
a || ! b      // <- true

Your last example is a bit off the beaten path. When we apply NOT directly to a non-boolean it first casts the value to a boolean, then negates it.
! 'blue'

'blue' is cast to true since a sting of any length but zero is truthy. NOT toggles it to false
However the logic is little fuzzy since the expression,
x === ! 'blue'

is akin to writing,
x === ! x

which is an oxymoron.
! 5

becomes false as well, since any number but 0 is truthy, and toggling that gives false.
Any number greater than zero is greater than false.
5 > false     // <- true
-5 > false    // <- false

This brings us to strict versus loose comparison.
0 === false    // <- false
0 == false     // <- true

Notice how the double = coerces the 0 to a boolean.
At any length, that last example is one to avoid owing to its mutation of objects before the comparison. That kind of logic could lead to some serious problems if it is not very thoroughly tesed and backed by sound reasoning.

I’m still uncertain, as the original exercise in the lesson  doesn’t use variables with boolean values (as you have with a = true and b = true).  Instead it uses one variable with a string value, and another with a number value (as in my example x = 'blue' and y = 5. Am I right in understanding that the boolean values arise when these non-boolean values are ‘tested’ with comparison operators in the conditional statement? i.e.



 jon_morris:

if (x === ‘blue’ && y <= 5)


… with both conditions, here, rendering the boolean true?
If this is the case, then could you confirm that what I have deduced as follows is correct for my example if( && ) statement (with mathematical comparisons)?
When the variables:
x = 'blue';
and
y = 5;
A)
if (!x === 'blue' && y <= 5)
and
if (!(x === 'blue' && y <= 5))
Both result in ‘false’ for the same reason, whether brackets or not are used.
First, the two comparisons render (true && true) = true
Then the ! negates this to give a final result of false.
B)
if (!x === 'blue' && y > 5)
and
if (!(x === 'blue' && y > 5))
Note <= has changed to >
First, both render (true && false) = false for the same reason, whether brackets or not are used.
Then the ! negates this to give a final result of true.
C)
if (!(x === 'blue') && !(y > 5))
Here brackets must be used if our intention is to negate each comparison separately before applying the && operator.
First, the two comparisons render (true && false)
Then the two ! negate both booleans separately to give (false && true), which gives a final result of false.
D)
if (!(x === 'red') && !(y > 5))
Note blue has changed to red
Again,  brackets must be used if our intention is to negate each comparison separately before applying the && operator.
First, the two comparisons render (false && false)
Then the two ! negate both booleans separately to give (true && true), which gives a final result of true.
Finally…



 jon_morris:

if (x === !‘blue’ || y > !5)





 mtf:

At any length, that last example is one to avoid owing to its mutation of objects before the comparison. That kind of logic could lead to some serious problems if it is not very thoroughly tesed and backed by sound reasoning.


I totally get that this is…



 mtf:

a bit off the beaten path



… and applies twisted logic that I wasn’t intending. So, let’s just forget about that one as something accidently stumbled-across while ‘playing around’ 




 jon_morris:

doesn’t use variables with boolean values


But they are both truthy, so not much difference.




 jon_morris:

the boolean values arise when these non-boolean values are ‘tested’ with comparison operators in the conditional


Think of outcome. Non-boolean values still have a potential to be truthy or falsy. Only a truthy value can make it into the first branch of an if statement. Their outcome evaluates to true but the value does not change. Control flow passes to the first branch and that code is executed.



 jon_morris:

with both conditions, here, rendering the boolean true ?


When expression A is truthy and espression B is truthy, the outcome of ANDing in a conditional branch is to hand control flow to the first branch. There is no conversion of either operand. Only their truthiness is evaluated.
Draw out three truth tables…
AND  T  F
  T  t  f
  F  f  f

 OR  T  F
  T  t  t
  F  t  f

NOT
  T  f
  F  t

TL; DR. Have to come back to this. Please bear with me.

No problem… no urgency, just appreciate your attempt to ‘untangle’ my understanding.
I think I can see now that each of the ‘comparisons’ (e.g. y > 5 ) in my conditional statement example, even though based on non-boolean values, will evaluate to either true or false. Then, depending on which logical operators (&&, || or !) are also applied, an overall evaluation of truthiness will be arrived at for the conditional statement as a whole, of either:
true  - executing the code block in the first branch (‘if’ branch);  or
false - executing the code block in the second branch (‘else’ branch).
So, in my 4 examples (A, B, C and D), where I’ve said, for example:



 jon_morris:

First, the two comparisons render (true && true) = true
Then the ! negates this to give a final result of false .


what I actually mean, and therefore should have said, is:

First, the two comparisons evaluate to TRUE & TRUE = TRUE.
Then the ! negates this first evaluation of TRUE to give a final evaluation of FALSE, which executes the code block in the second branch (‘else’ branch).

I’d be grateful if you could still check whether my 4 examples are correct (in terms of ! position, use of brackets, and final outcome), bearing in mind this adjustment to the wording and therefore their interpretation.




 jon_morris:

A)
if (!x === 'blue' && y <= 5)
and
if (!(x === 'blue' && y <= 5))
Both result in ‘false’ for the same reason, whether brackets or not are used.
First, the two comparisons render (true && true) = true
Then the ! negates this to give a final result of false .


If x is 'blue', then ! x will be false since ‘blue’ is truthy. We would only NOT x if it was an expression other than a string literal. Instead, NOT the comparison expression, which will need brackets since Logical NOT has precedence to IDENTITY (Strict Equality).
! (x === 'blue')

is false when x is ‘blue’, true when x is not ‘blue’.
When brackets are used to group expressions, then what’s inside is evaluated first. When there are no brackets then we follow left to right associativity.
! x === 'blue'  =>
false === 'blue' ?  false




 jon_morris:

Both result in ‘false’ for the same reason


Not so. As we’ve shown they both result in false but not for the same reason.
! x

short-circuits AND so the second operand is not evaluated.
! (A && B)

is false because it negates the full evaluation of both truthy operands with AND.
In your example B, again, it is not the same reason. ! x is false when x is truthy. That short-circuits AND.
We say the F && F is false, but in truth, F && anything is false since anything never gets evaluated when the first operand is false.
In C, not truthy && not truthy short-circuits. We never get to the second operand. If expression A is truthy, we never look at expression B.
In D, both expressions will be falsy, so NOTting both will make them both true. We’ve already seen that,
! A && ! B

is the same as,
! (A && B)

Found this table on MDN

Operator precedence


Thanks so much for that analysis @mtf… I’ve managed to follow it through and I’m now clear about my examples A, B and D 
Can I just query your explanation of my example C?



 jon_morris:

When the variables:
x = 'blue';
and
y = 5;





 jon_morris:

C)
if (!(x === 'blue') && !(y > 5))





 mtf:

In C, not truthy && not truthy short-circuits. We never get to the second operand. If expression A is truthy, we never look at expression B.


 Shouldn’t this be:


(not truthy && truthy) short-circuits… as !(y > 5) is NOT(falsy) i.e. truthy?


But as you say we never get to the second operand anyway… but because the first expression is not truthy, because if it were truthy, then with an ( && ) statement we would have to evaluate the second operand to see if it were also truthy.


Is this correct?




 jon_morris:


because if it were truthy , then with an ( && ) statement we would have to evaluate the second operand to see if it were also truthy.

Is this correct?


Correct.



 jon_morris:

if (!(x === ‘blue’) && !(y > 5))


Recall that ! A && ! B is the same as ! (A && B), in which case there would be no short-circuit. But when written as,
! A && ! B

it short-circuits when A is truthy. A must be falsy for ! B to be evaluated. If B is falsy then ! B is true, and the final resolution of the two is true.
Note that the outcome of A && B is literally, B when A is truthy.
6 && 7    // <-  7

How’s that for derailing the boolean train?
7 && 6    // <-  6

Go back and read that sentence again, just to cement the logic of it. We kind of need to go down this rabbit hole to really get a picture of what truthy and falsy are all about. It also reveals more insight into what AND and OR represent as operators.
Consider the following piece of code…
const maximize = (a, b) => a > b && a || b;

What do you suppose it is doing?

Coach Hitchcock of the Edmonton Oilers…
“You don’t take your skill for granted, but you trust your work…”

You’ve lost me in the second half of your post… I think derailing boolean trains is beyond my reach at the moment… maybe I’ll be ready to go down that rabbit hole in a few weeks time after some more basics (I only started with JavaScript on Saturday as a complete beginner) 
Just to clarify, when you say…



 mtf:

Recall that ! A && ! B is the same as ! (A && B)


…do you mean they both evaluate to an outcome of false, when…
A = true
and
B = true
because:
(!A && !B)
short-circuits at the first operand (!A) because this evaluates to NOT true
i.e.  an outcome of false
and
(! (A && B))

evaluates the (A) within the brackets to true, so doesn’t short-circuit, and next
evaluates the (B) within the brackets to true

which is then negated by the ! (outside the brackets) giving an outcome of false…?

I assume you aren’t referring to my example of:



 jon_morris:

if (!(x === ‘blue’) && !(y > 5))


because wouldn’t that mean…
if
A = x = 'blue'
and
B = y = 5
then
(!A && !B)
still short-circuits at the first operand (!A) because this evaluates to NOT true
i.e.  an outcome of false
but
(! (A && B)) gives a different outcome…

it does still evaluate the (A) within the brackets to true, so doesn’t short-circuit, but next
evaluates the (B) within the brackets ( y > 5) to false (because B = y = 5)
which is then negated by the ! (outside the brackets) giving an outcome of true …?

 

Quick reply:



 jon_morris:

! A && ! B is the same as ! (A && B)


A and B in my pseudo code are expressions.
A = x === 'blue'
B = y > 5

In the above real code they still represent expressions. Lock in on that.



 jon_morris:

A = x = 'blue'
and
B = y = 5


The = operator is right to left associative so reads from the right. 5 is assigned to y, and the reference is assigned to B.

I just want to clear something up. !A && !B  is not equivalent to !(A && B).
!A && !B is true only if both A and B evaluate to false. !(A && B) is true if either A or B evaluate to false.
!A && !B is the equivalent of !(A || B), both in truthiness and the short-circuit evaluation that mtf is talking about.
Symmetrically, !(A && B) is equivalent to !A || !B. This is called de Morgan’s Law.




 chrisgallegos:

I just want to clear something up.


Thanks for that bit of clarity, and for setting us straight. I was hoping somebody would come forth to refute and untangle any incorrectness by digging deeper into the logic.




 chrisgallegos:

I just want to clear something up. !A && !B is not equivalent to !(A && B) .
!A && !B is true only if both A and B evaluate to false. !(A && B) is true if either A or B evaluate to false.


This makes more sense to me, and is more along the lines of what I was trying to question above.
Can you confirm that the following is therefore correct?
Note: As with my original example, each of the following statements are based on the variables x and y having already been assigned values as follows:
let x = 'blue';
let y = 5;

FIRST FACT
!A && !B can  have the same outcome as !(A && B), if both A and B individually evaluate to the same (i.e. BOTH TRUE, or BOTH FALSE) as shown in examples 1a and 1b:
Example 1a
if (!(x = 'blue') && !(y <= 5))

This statement is !A && !B
A evaluates to true
so
!A evaluates to false
so short-circuits, and B not evaluated
Outcome of if (statement) is FALSE
Example 1b
if (!(x = 'blue' && y <= 5))

This statement is !(A && B)
A evaluates to true
so doesn’t short-circuit, and
B evaluates to true
so
A && B evaluates to true AND true = true
so
!(A && B) evaluates to false, and
Outcome of if (statement) is also FALSE
Example 1a evaluates to FALSE
Example 1b evaluates to FALSE
However,
SECOND FACT



 chrisgallegos:

!A && !B is not equivalent to !(A && B) .


because !A && !B can have a different outcome to !(A && B), if A and B individually have differing evaluations (i.e. TRUE/FALSE or FALSE/TRUE) as shown in examples 2a and 2b:
Note: the only change to expressions A and B in the if(statement) is that now B = y > 5 (instead of y <= 5); expression A remains unchanged.
Example 2a
if (!(x = 'blue') && !(y > 5))

This statement is !A && !B
A evaluates to true
so
!A evaluates to false
so short-circuits, and B not evaluated (as in example 1a above)
Outcome of if (statement) is FALSE
Example 2b
if (!(x = 'blue' && y > 5))

This statement is !(A && B)
A evaluates to true
so doesn’t short-circuit, and
B evaluates to false
so
A && B evaluates to true AND false = false
so
!(A && B) evaluates to true, and
Outcome of if (statement) is TRUE, which is different to example 2a.
Example 2a evaluates to FALSE
Example 2b evaluates to TRUE
I hope I’ve managed to explain more clearly and logically what I’ve been trying to understand.
When my brain’s recovered  a bit, I’ve take a dive into De Morgan’s Laws ! 



 chrisgallegos:

!A && !B is the equivalent of !(A || B) , both in truthiness and the short-circuit evaluation that mtf is talking about.
Symmetrically, !(A && B) is equivalent to !A || !B . This is called de Morgan’s Law.


Thank you both @mtf and @chrisgallegos for your help and patience! 

The “rabbit hole” I mentioned was brought up so we would eventually unearth any inconsistencies through testing and observation.
Recall the earlier statement,
A && B

returns B when A is truthy, else it returns A.
0 && 7  =>  0
7 && 0  =>  0

! A && ! B when A is 0 and B is 7 returns a boolean since we are ANDing two booleans. Recall that ! first casts to a boolean then toggles it. !A will be true so the yield will be !B, or false.
! (A && B) when A is 0 and B is 7 returns a boolean since it casts the yield to a boolean and toggles it. The yield as shown above will be A. Then we NOT it…
! 0  =>  true

Similarily,
A || B

returns A when A is truthy, else it returns B
0 || 7  =>  7
7 || 0  =>  7

! A || ! B, as stated will return a boolean since we are ORIng two booleans. Since ! A (A is 0) is truthy (in this instance), then ! B is is not evaluated, and the yield is true.
! (A || B) returns a boolean since we NOT the yield of A || B. A is falsy, so we yield B, and NOT that…
! 7  =>  false

So we can see that
! A && ! B === ! (A || B)

when A and B are opposite.
What about when they are both the same.
! 6 && ! 7  =>  false
! (6 && 7)  =>  false
! 6 || ! 7  =>  false
! (6 || 7)  =>  false

As this begins to make sense, you will be able to explain,
const maximize = (a, b) => a > b && a || b;

Mind, if not already covered, do the unit on Functions before attempting to.
"
8,ActualSleepHours is not defined at Object,Get Help - Java,"functions,general",3,30,"
Hello, I’m working on this link:


gist.github.com


https://gist.github.com/codecademydev/658d3eb68694c651172f1a3913cbf72e
sleepDebtCalculator.js
const getSleepHours = day => {
 switch(day){
   case 'monday':
     return 8
     break;
   case 'tuesday':
     return 7
     break;
   case 'wednesday':
     return 5
This file has been truncated. show original







I’m getting this error message below.  Please help!  Thank you!
7
47
56
/home/ccuser/workspace/javascript_101_Unit_3/Unit_3/sleepDebtCalculator.js:55
if(actualSleepHours === idealSleepHours){
^
ReferenceError: actualSleepHours is not defined
at Object. (/home/ccuser/workspace/javascript_101_Unit_3/Unit_3/sleepDebtCalculator.js:55:4)
at Module._compile (module.js:571:32)
at Object.Module._extensions…js (module.js:580:10)
at Module.load (module.js:488:32)
at tryModuleLoad (module.js:447:12)
at Function.Module._load (module.js:439:3)
at Module.runMain (module.js:605:10)
at run (bootstrap_node.js:427:7)
at startup (bootstrap_node.js:151:9)
at bootstrap_node.js:542:3
","
Hi welcome to the forums 
The scopre of your variable actualSleepHours is confined locally to the one function where it’s declared: calculateSleepDebt() .
If you want to use it as you are, you have to declare it first.
function someFunction(){
   let x = 45;
   return x;
}
// you still can't reference x outside of this function
let x = somethingElse;
console.log(x);
//output: somethingElse



If you call x before declaring it you will get the reference error:
function someFunction(){
   let x = 45;
   return x;
}
console.log(x);
//Uncaught ReferenceError: x is not defined


What I think you are trying to do in that line of code is call the function getActualSleepHours() and the function getIdealSleepHours() in order to return numbers which will be compared in the conditional part of your “if” statement. You need brackets after the function names. I think that should read
if (getActualSleepHours() === getIdealSleepHours()) {
The easier way to do it without rewriting a bunch of your existing code would be to declare the two variables at the beginning of the function before you start the conditional statements, just like you do at the beginning of calculateSleepDebt() - although, it looks as though you’ve got an extra closing curly bracket right after the two variable declarations in that function that is also going to prevent things from working properly.
"
9,Why is this wrong? Help with Meal Maker,Get Help - Java,"learn-objects,general",8,32,"
const menu = {

_courses  = {

appetizers: [],

  mains: [],

  desserts: [],

},

get appetizers() {

  return this._courses.appetizers;

},

get mains() {

  return this._courses.mains;

},

get desserts() {

  return this._courses.desserts;

},

set appetizers (appetizers) {

  this._courses.appetizers = appetizers

},

set mains (mains) {

  this._courses.mains = mains

},

set desserts (desserts) {

  this._courses.desserts = desserts

},

get courses() {

return {

  appetizers: this.appetizers,

  mains: this.mains

  desserts: this.desserts

  };

},

addDishToCourse(courseName, dishName, dishPrice) {

const dish = {

  name: dishName

  price: dishPrice

};

return this._courses[courseName].push(dish);

},

getRandomDishFromCourse(courseName) {

  const dishes = this.courses[courseName];

 const ram = Math.floor(Math.random() * dishes.length);

 return dishes[randomIndex];

},

generateRandomMeal() {

  const appetizer = this.getRandomDishFromCourse('appetizers');

  const main = this.getRandomDishFromCourse('mains');

  const dessert = this.getRandomDishFromCourse('desserts');

  const price = appetizer.price + main.price + dessert.price;

  return `Your meal is ${appetizer.name}, ${main.name}, ${dessert.name} which come to a total oof ${price} dollars`

}

};

menu.addDishToCourse('appetizers', 'Escargot', 10.00);

menu.addDishToCourse('appetizers', 'Calamari', 12.00);

menu.addDishToCourse('appetizers', 'Fries', 7.00);

menu.addDishToCourse('mains', 'Lobster', 22.00);

menu.addDishToCourse('mains', 'Lamb', 16.00);

menu.addDishToCourse('mains', 'Macaroni', 12.00);

menu.addDishToCourse('desserts', 'Rasberry Pie', 10.00);

menu.addDishToCourse('desserts', 'Pineapple Sorbet', 8.00);

menu.addDishToCourse('desserts', 'Chocolate Mousse', 12.00);

const meal = menu.generateRandomMeal();

console.log(meal);

","
I couldn’t get it right the first time so I copied it down exactly from the video. It was still wrong saying that there was a “syntax error: unexpected identifiers” where “desserts : this.desserts” in get courses is. What do I do?

Hi! Thanks for sharing your code and welcome to the forums.
The first step is to identify what the surface issues are: are there errors (what are they?), is a result not coming out the way you want it (what are the functions related to this error)? The more specific the question, the more the forum can help out!




 blog9032618122:

getRandomDishFromCourse(courseName) {

  const dishes = this.courses[courseName];

 const ram = Math.floor(Math.random() * dishes.length);

 return dishes[randomIndex];

},



what happened to const ram and the return statement afterwards?

Thanks for that, that was wrong, but it still says there is a syntax error in the same place I stated before.


Thanks for that, that was wrong, but it still says there is a syntax error in the same place I stated before.

There’s a syntax error here if you can spot it… like the error message says, it’s around the word desserts.
return {

  appetizers: this.appetizers,

  mains: this.mains

  desserts: this.desserts

  };


Thanks so much, I found all of the errors now and it is working properly!

@irlfede did the heavy lifting 
"
10,Re-creating the Lodash Library: _.findKey(),Get Help - Java,"learn-objects,general",3,18,"
Hi There!
https://www.codecademy.com/paths/web-development/tracks/web-dev-js-arrays-loops-objects/modules/pjs-javascript-capstone/projects/lodash
I’ve got this one working but I want to understand the logic behind something. I feel like I may be missing something obvious. This is the solution, that works as expected.
  findKey(object, predicate) {
    for (let key in object) {
      let value = object[key];
      let predicateReturnValue = predicate(value);
      if (predicateReturnValue) {
        return key;
        }
      }
      return undefined;
    }

The question I’ve got is - you’re explicitly told that “return undefined” has to fall outside of the loop.

Outside of the loop, return  undefined  to address all cases where no truthy values were returned from predicate.

My first pass, which succeeded and passed the test had the “return undefined” come as part of the if statement. IE:
  findKey(object, predicate) {
    for (let key in object) {
      let value = object[key];
      let predicateReturnValue = predicate(value);
      if (predicateReturnValue) {
        return key;
        } else {
          return undefined;
        }
      }
    }

That worked fine, but going back to look at the actual solution has gotten me confused.
If you “return undefined” outside of the loop, specifically the if statement, wouldn’t that mean that undefined will always be returned, overwriting return key in the case of a truthy response to predicateReturnValue?
Definitely feel like I’m missing something obvious here!
","
By returning a value, you automatically exit a function, so if you reach the end of a function, it means that nothing has been returned up to this point: This is a common way to save yourself lines of code (and unnecessary conditionals).
You know, logically, that by the time you reach the end of the function (after the loop), that no key value has been returned (because the code is still running).  Since that’s the case, you can just return undefined.

Ahhh perfect, that makes sense. Thanks!
"
11,Chore Door Game; won't start?,Get Help - Java,general,3,27,"
I followed the instructions, but the game won’t start…
What is wrong with my code?
let doorImage1 = document.getElementById('door1');
let doorImage2 = document.getElementById('door2');
let doorImage3 = document.getElementById('door3');

const botDoorPath = ""https://s3.amazonaws.com/codecademy-content/projects/chore-door/images/robot.svg"";
const beachDoorPath = ""https://s3.amazonaws.com/codecademy-content/projects/chore-door/images/beach.svg"";
const spaceDoorPath = ""https://s3.amazonaws.com/codecademy-content/projects/chore-door/images/space.svg"";
const closedDoorPath = ""https://s3.amazonaws.com/codecademy-content/projects/chore-door/images/closed_door.svg"";

let startButton = document.getElementById('start');
let currentlyPlaying = true;
let numClosedDoors = 3;
let openDoor1, openDoor2, openDoor3;


const isBot = (door) => {
  if (door.src === botDoorPath){
    return true;
  } else{
    return false;
  }
}

const isClicked = (door) => {
  if (door.src === closedDoorPath){
    return false;
  } else {
    return true;}
}


const playDoor = (door) => {
  numClosedDoors--;
  if (numClosedDoors === 0){
    gameOver('win');
  } else if (isBot(door)){
    return gameOver();
  }
};

const randomChoreDoorGenerator = () =>{
  let choreDoor = Math.floor(Math.random()*numClosedDoors)
  if (choreDoor===0){
    openDoor3 = botDoorPath;
    openDoor2 = beachDoorPath;
    openDoor1 = spaceDoorPath;
  } else if (choreDoor===1){
    openDoor2 = botDoorPath;
    openDoor3 = spaceDoorPath;
    openDoor1 = beachDoorPath;
  } else {
    openDoor1 = botDoorPath;
    openDoor2 = spaceDoorPath;
    openDoor3 = beachDoorPath;
  }
}


doorImage1.onclick = () => {
  if (!isClicked(doorImage1) && currentlyPlaying){
     doorImage1.src = openDoor1;
     playDoor(doorImage1);
  }
};

doorImage2.onclick = () => {
  if (!isClicked(doorImage2) && currentlyPlaying){
  doorImage2.src = openDoor2;
  playDoor(doorImage2);
  }
};

doorImage3.onclick = () => {
  if (!isClicked(doorImage3) && currentlyPlaying){
  doorImage3.src = openDoor3;
  playDoor(doorImage3);
  }
};

const startRound = () => {
  doorImage1.src = closedDoorPath;
  doorImage2.src = closedDoorPath;
  doorImage3.src = closedDoorPath;
  numClosedDoors = 3;
  starButton.innerHTML = ""Good luck!"";
  currentlyPlaying = true;
  randomChoreDoorGenerator();
}


startButton.onclick = () =>{
  if(!currentlyPlaying){
    startRound();
  }
}

const gameOver = (status) = {
  if (status ==='win'){
    startButton.innerHTML = ""You win! Play again?""
  } else {
    startButton.innerHTML = ""Game over! Play again?""
    currentlyPlaying = false;
  }  
}

startRound();

","



 essdontmess:

let choreDoor = Math.floor(Math.random()*numClosedDoors)


that part is missing a ;
Will that fix it? Also, did you make sure the script file is linked in the HTML?

I’d recommend looking at your gameOver ‘function’ the syntax isn’t quite right. Also are you doing writing this in the codecademy editor? For the projects I’d recommend using a standalone editor such as Visual Studio Code, it’ll help pick up on errors a bit easier.
"
12,Rock Paper Scissors x99,Get Help - Java,"functions,general",3,40,"
Hi, I’m on the Rock Paper Scissors Cumulative project and I’m stuck on the getRoundWinner function. I’ve cleared all of the tests so far but I’m not able to get it to return the correct winner for the 3 rounds. I’ve even watched the solutions video and followed some of what the instructor did what I’ve written is not passing.
let playerOneMoveOneType;

let playerOneMoveTwoType;

let playerOneMoveThreeType;

let playerTwoMoveOneType;

let playerTwoMoveTwoType;

let playerTwoMoveThreeType;

let playerOneMoveOneValue;

let playerOneMoveTwoValue;

let playerOneMoveThreeValue;

let playerTwoMoveOneValue;

let playerTwoMoveTwoValue;

let playerTwoMoveThreeValue;

setPlayerMoves = (player, moveOneType, moveOneValue, moveTwoType, moveTwoValue, moveThreeType, moveThreeValue) =>{

    if (!moveOneType || !moveTwoType || !moveThreeType){

        return;

    }

    if (!moveOneValue || !moveTwoValue || !moveThreeValue){

        return;

    }

    if (moveOneValue < 1 || moveTwoValue < 1 || moveThreeValue < 1){

        return;

    }

    if (moveOneValue > 99 || moveTwoValue > 99 || moveThreeValue > 99){

        return;

    }

    if (moveOneValue + moveTwoValue + moveThreeValue > 99){

        return;

    }

    if (!isValidMoveType(moveOneType) || !isValidMoveType(moveTwoType) || !isValidMoveType(moveThreeType)){

        return;

    }

    if (player === 'Player One'){

        playerOneMoveOneType = moveOneType;

        playerOneMoveOneValue = moveOneValue;

        playerOneMoveTwoType = moveTwoType;

        playerOneMoveTwoValue = moveTwoValue;

        playerOneMoveThreeType = moveThreeType;

        playerOneMoveThreeValue = moveThreeValue;

   } else if (player === 'Player Two'){

       playerTwoMoveOneType = moveOneType;

       playerTwoMoveOneValue = moveOneValue;

       playerTwoMoveTwoType = moveTwoType;

       playerTwoMoveTwoValue = moveTwoValue;

       playerTwoMoveThreeType = moveThreeType;

       playerTwoMoveThreeValue = moveThreeValue;

   } else {

       return;

    }

};

isValidMoveType = (moveType) =>{

    return (moveType === 'rock') || (moveType === 'paper') || (moveType === 'scissors');

};

getRoundWinner = (roundNumber) =>{

    switch (roundNumber){

        case 1:

            return getMoveWinner(playerOneMoveOneType, playerOneMoveOneValue, playerTwoMoveOneType, playerTwoMoveOneValue);

        case 2:

            return getMoveWinner(playerOneMoveTwoType, playerOneMoveTwoValue, playerTwoMoveTwoType, playerTwoMoveTwoValue);

        case 3:

             return getMoveWinner(playerOneMoveThreeType, playerOneMoveThreeValue, playerTwoMoveThreeType, playerTwoMoveThreeValue);

        default:

            return null;

    }

};

getMoveWinner = (playerOneMoveType, playerOneMoveValue, playerTwoMoveType, playerTwoMoveValue ) =>{

    if (!playerOneMoveType || !playerOneMoveValue || !playerTwoMoveType || !playerTwoMoveValue){

        return null;

    }

    if (playerOneMoveType === playerTwoMoveType){

        if (playerOneMoveValue > playerTwoMoveValue){

            return 'Player One';

        } else if (playerOneMoveValue < playerTwoMoveValue){

            return 'Player Two';

        } else {

            return 'Tie';

        }

    }

    if (playerOneMoveType === 'rock'){

        if (playerTwoMoveType === 'scissors'){

            return 'Player One';

        } else {

            return 'Player Two';

        }

    } else if (playerOneMoveType === 'rock'){

        if (playerTwoMoveType === 'paper'){

            return 'Player Two';

        } else {

            return 'Player One';

        }

    } else {

        if (playerTwoMoveType === 'scissors'){

            return 'Player Two'

        } else {

            return 'Player One';

        }

    }

}

","
Welcome to the forums 
I would put console.log statements in the area you think is being affected that reflect the incoming inputs.
Consider using template literals for this purpose, as they can enhance clarity and speed your search, for example:
let some_variable = 10;
console.log(`some_variable value is: ${some_variable}`);
// output:
// ""some_variable value is: 10""

In terms of your variable declarations, consider there’s a principle in programming called DRY (don’t repeat yourself). Is there a way to structure your code so you use fewer declarations?

Thank you!
Tbh I realized reading your comment that although I’ve done the lessons referring to things like template literals I still don’t understand how I would actually use them and I feel like I didn’t absorb what came before enough to solve this so I’m choosing to re-review the past lessons. I’ll try to take your advice into account once I reach this point again.
"
13,Credit card checker,Get Help - Java,general,9,77,"
Hello everyone, I need help with the credit card checker project, I can’t implement luhn’s algorithm, someone can help me. Thank you
","
Hello! This is an article of Luhn’s algorithm. I can’t help anymore without seeing your code.

5 * 2  =>  10  =>  1 + 0  =>  1  <= 10 - 9
6 * 2  =>  12  =>  1 + 2  =>  3  <= 12 - 9
7 * 2  =>  14  =>  1 + 4  =>  5  <= 14 - 9
8 * 2  =>  16  =>  1 + 6  =>  7  <= 16 - 9
9 * 2  =>  18  =>  1 + 8  =>  9  <= 18 - 9

That’s the math of it, either way.
Now to plan which digits in the two lists below get the math done on them.
[5, 5, 3, 5, 7, 6, 6, 7, 6, 8, 7, 5, 1, 4, 3, 9]

[3, 7, 1, 6, 1, 2, 0, 1, 9, 9, 8, 5, 2, 3, 6]

Once the math is done we just add up the values and divide by 10. If the remainder is zero, it’s a valid cc number.

The algorithm starts from the right side, second element in, moving left. We see a variety of approaches that attack it from that point and work right to left. Seems like a lot of work to me.
Why not just measure the length and decide which element to begin on, and work from left to right? Parity solves this. The starting element is the length modulo 2.

Proof of concept
>>> def luhn(s):
	def f(a):
		return sum([*map(int, [*str(a)])])
	for n in range((len(s) % 2), len(s), 2):
		s[n] = f(s[n] * 2)
	return sum(s) % 10 == 0

>>> u = [5, 5, 3, 5, 7, 6, 6, 7, 6, 8, 7, 5, 1, 4, 3, 9]
>>> v = [3, 7, 1, 6, 1, 2, 0, 1, 9, 9, 8, 5, 2, 3, 6]
>>> luhn(u)
True
>>> luhn(v)
True
>>> p = [4, 5, 3, 2, 7, 7, 8, 7, 7, 1, 0, 9, 1, 7, 9, 5]
>>> q = [5, 7, 9, 5, 5, 9, 3, 3, 9, 2, 1, 3, 4, 6, 4, 3]
>>> luhn(p)
False
>>> luhn(q)
False
>>> 


Proof of concept, this time in the correct language…
const luhn = t => {
  const g = (a, b) => +a + +b
  const f = x => [...(x.toString())].reduce(g)
  const s = t.slice()
  for (let n = s.length % 2; n < s.length; n += 2) {
    s[n] = f(s[n] * 2)
  }		
  return s.reduce(g) % 10 == 0
}

This code did not come about by accident. And it is not a first draft of this problem, given the conditions. Anybody who skips those first steps will never get to this point on their own. Don’t use this code unless you can write it yourself.


https://repl.it/@mtf/ccCheckerjs


I tried to see the solution, to find out if I could figure it out and do it again on my own, even after all this, I can’t figure it out.

Hello!
please can I get the link to this project “Credit card checker”?



gist.github.com


https://gist.github.com/codecademydev/7d43de19eb6c558b7c03d9325417ff6d
main.js
// All valid credit card numbers
const valid1 = [4, 5, 3, 9, 6, 7, 7, 9, 0, 8, 0, 1, 6, 8, 0, 8];
const valid2 = [5, 5, 3, 5, 7, 6, 6, 7, 6, 8, 7, 5, 1, 4, 3, 9];
const valid3 = [3, 7, 1, 6, 1, 2, 0, 1, 9, 9, 8, 5, 2, 3, 6];
const valid4 = [6, 0, 1, 1, 1, 4, 4, 3, 4, 0, 6, 8, 2, 9, 0, 5];
const valid5 = [4, 5, 3, 9, 4, 0, 4, 9, 6, 7, 8, 6, 9, 6, 6, 6];

// All invalid credit card numbers
const invalid1 = [4, 5, 3, 2, 7, 7, 8, 7, 7, 1, 0, 9, 1, 7, 9, 5];
const invalid2 = [5, 7, 9, 5, 5, 9, 3, 3, 9, 2, 1, 3, 4, 6, 4, 3];
This file has been truncated. show original







"
14,"Sleep Debt Calculator – My code works, but it is saying undefined",Get Help - Java,functions,2,30,"
This is the output:

You haven’t slept enough. You should get 5 hours more rest.
undefined

Does anyone know why the code below reads “undefined”?
const getSleepHours = day => {
day = day.toLowerCase();
switch (day) {
case ‘sunday’:
return 6
break;
case ‘monday’:
return 5
break;
case ‘tuesday’:
return 6.5
break;
case ‘wednesday’:
return 4.5
break;
case ‘thursday’:
return 6
break;
case ‘friday’:
return 7
break;
case ‘saturday’:
return 5.5
break;
default:
return; ‘Error!’;
break;
}
};
const getActualSleepHours = () =>
getSleepHours(‘sunday’) +
getSleepHours(‘monday’) +
getSleepHours(‘tuesday’) +
getSleepHours(‘wednesday’) +
getSleepHours(‘thursday’) +
getSleepHours(‘friday’) +
getSleepHours(‘saturday’);
const getIdealSleepHours = () => {
const idealHours = 6.5;
return idealHours * 7;
};
const calculateSleepDebt = () => {
const actualSleepHours = getActualSleepHours();
const idealSleepHours = getIdealSleepHours();
if (actualSleepHours === idealSleepHours) {
console.log(‘You got the perfect amount of sleep!’);
} else if (actualSleepHours > idealSleepHours) {
console.log(‘You got ‘+(actualSleepHours - idealSleepHours)+’ more sleep than you needed.’);
} else if (actualSleepHours < idealSleepHours) {
console.log(‘You haven’t slept enough. You should get ‘+(idealSleepHours - actualSleepHours)+’ hours more rest.’);
}
}
console.log(calculateSleepDebt());
","
Please remember to format your code.
const getSleepHours = day => {
    day = day.toLowerCase();
    switch (day) {
        case‘ sunday’:
            return 6
            break;
        case‘ monday’:
            return 5
            break;
        case‘ tuesday’:
            return 6.5
            break;
        case‘ wednesday’:
            return 4.5
            break;
        case‘ thursday’:
            return 6
            break;
        case‘ friday’:
            return 7
            break;
        case‘ saturday’:
            return 5.5
            break;
        default:
            return;‘
            Error!’;
            break;
    }
};

const getActualSleepHours = () =>
    getSleepHours(‘sunday’) +
    getSleepHours(‘monday’) +
    getSleepHours(‘tuesday’) +
    getSleepHours(‘wednesday’) +
    getSleepHours(‘thursday’) +
    getSleepHours(‘friday’) +
    getSleepHours(‘saturday’);

const getIdealSleepHours = () => {
    const idealHours = 6.5;
    return idealHours * 7;
};

const calculateSleepDebt = () => {
    const actualSleepHours = getActualSleepHours();
    const idealSleepHours = getIdealSleepHours();
    if (actualSleepHours === idealSleepHours) {
        console.log(‘You got the perfect amount of sleep!’);
    } else if (actualSleepHours > idealSleepHours) {
        console.log(‘You got‘ + (actualSleepHours - idealSleepHours) + ’more sleep than you needed.’);
    } else if (actualSleepHours < idealSleepHours) {
        console.log(‘You haven’ t slept enough.You should get‘ + (idealSleepHours - actualSleepHours) + ’hours more rest.’);
    }
}
console.log(calculateSleepDebt());

There are a good number of syntax issues in your switch statement: Resolve those, and you will be able to better analyze your functionality.

The last line of your code logs the output of your calculateSleepDebt function… which is nothing: In that function, you log the results instead of returning them.  Change your console.log() calls inside of calculateSleepDebt to return calls.
const calculateSleepDebt = () => {
    const actualSleepHours = getActualSleepHours();
    const idealSleepHours = getIdealSleepHours();
    if (actualSleepHours === idealSleepHours) {
        return('You got the perfect amount of sleep!');
    } else if (actualSleepHours > idealSleepHours) {
        return('You got' + (actualSleepHours - idealSleepHours) + 'more sleep than you needed.');
    } else if (actualSleepHours < idealSleepHours) {
        return(""You haven't slept enough. You should get "" + (idealSleepHours - actualSleepHours) + "" hours more rest."");
    }
}
console.log(calculateSleepDebt());

"
15,Understanding the use of typeof?,Get Help - Java,,19,3829,"
Why does typeof this._energyLevel === ‘number’ evaluate to true when the data type of _energyLevel is 100 not a string ‘number’
","
The comparison is not this._energyLevel === ‘number’, but, typeof this._energyLevel === ‘number’. typeof is evaluated before the comparison.
typeof 100 => 'number'

typeof this._energyLevel === ‘number’
In this statement as @mtf stated, typeof is evaluated first, and returns the data type as a string. In this case typeof returns ‘number’ and since ‘number’ === ‘number’ the statement is true.
Check this out:



MDN Web Docs



typeof
The typeof operator returns a string indicating the type of the unevaluated operand.







Hello, I don’t understand why testing to see if something is a number requires a
typeof    ‘number’
why isn’t it type of num ?
num is a built in thing the computer knows means it has to be a number. I totally don’t get typeof as being ‘number’

There is no data type, num in JavaScript. It is number.
The typeof operator examines a value and determines its data type.

https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof


okay thank you very much. I am at peace with this.

Can someone please explain to me what I may be missing/not understanding in this code?
const robot = {
_model: ‘1E78V2’,
_energyLevel: 100,
get energyLevel(){
if (typeof this._energyLevel){
return 'My current energy level is ’ + this._energyLevel
} else {
return ‘System malfunction: cannot retrieve energy level’
}
}
};
When I try to run it, I get this response:
Did you add an else statement to return the string 'System malfunction: cannot retrieve energy level' ?: expected ‘My current energy level is string’ to equal ‘System malfunction
Thank you!




 ezrarabinsky63525281:

if (typeof this._energyLevel){


Is it necessary to know the type of the value when we are getting it? That should not be a concern. We only wish to retrieve the value and report it.
Now if the condition were to be something that checks the amount of energy, then it would make practical sense.
x = this._energyLevel
if (x > 0) {
    return `Current energy level is, ${x}.`
} else {
    return `System malfunction. Energy level ${x} is too low.`
}

To help with context, please provide a link to this exercise so we may ascertain the expectations.

Gladly! Here it is:
https://www.codecademy.com/courses/introduction-to-javascript/lessons/advanced-objects/exercises/getters?action=resume_content_item
Thanks!

Ah, okay, I see now what’s going on. The instructions ask us to check the type, which would make sense only if some other method or direct call is changing the value. This would be rectified in a setter, but that must for somewhere down the line.
x = this._energyLevel
if (typeof x === 'number') {
    return `My current energy level is ${x}`;
} else {
    return `System malfunction: cannot retrieve energy level`;
}

Thank you! Just to clarify, is there a substantial difference between setting the first argument of the conditional like this:
if (typeof x) {…}
as opposed to this:
if (typeof x === ‘number’) {…}
Or did that only matter for this particular exercise?




 ezrarabinsky63525281:

typeof x === ‘number’)


We need to carry out the full comparison.

If you only have ‘typeof x’ in the if statement then it will always pass as true and your else will never run. If the data type is a string it will be true and it will be true if the data type is a number or anything else. It has nothing to compare itself to to be useful.

Hi;
I answered the “if” part of question by using “$” :
const robot = {
_model: ‘1E78V2’,
_energyLevel: 100,
get energyLevel (){
if(typeof this._energyLevel===‘number’){
return My current energy level is ${this._energyLevel}.
}
}
};
But it popups error. I got the answer of system, that was:
const robot = {
_model: ‘1E78V2’,
_energyLevel: 100,
get energyLevel(){
if(typeof this._energyLevel === ‘number’) {
return 'My current energy level is ’ + this._energyLevel
} else {
return “System malfunction: cannot retrieve energy level”
}
}
};
console.log(robot.energyLevel);
Why in correct answer, it not used of “$”…
grateful
martinmiciciday

Hi;
Why in “console.log” we not use of :
console.log(robot.energyLevel());
or:
console.log(robot._energyLevel);
because nowhere of our script we used of “energyLevel” alone.
How do I should realize that I have to use console.log(robot.energyLevel);
I mean “energyLevel” alone.
grateful
martinmiciciday

Hi @object7208093151 
For what I can see about your code, I think what’s missing are a pair of backticks when you use string interpolation , like so:
... {
return `My current energy level is ${this._energyLevel`}
...

I also see a dot at the end of that line… I don’t know if that’s a misptrint or what.
Hope it helps!

I’m rather curious about why using:
if (robot._energyLevel.typeof === 'number')
and using:
if (typeof robot._energyLevel === 'number')
are both acceptable to the editor.
Unless I’m missing something here, shouldn’t appending the TypeOf operator to the end of the property using dot notation throw an error? or does it not matter?
Thanks.

Good afternoon,
regarding exercise “getters” in advanced objects; why does the correct code not require ${this._energyLevel} and instead requires 'My current energy level is  ’ + this._energyLevel?Getters Snippet895×368 27.5 KB

I’m just taking this lesson now and as I understand it, energyLevel as a getter is a method/function so from the prior lessons I would assume that it gives value of this to the method’s calling object which would in this case be the robot object instead of the global object.
Plus we are concatenating a string instead of using backticks for a template literal.
I may be sorely mistaken though as I am quite new, so take my response with a grain of salt.
"
16,Modules lesson,Get Help - Java,learn-modules,4,23,"
Hello everyone.
I’m doing the JS part of the web development course and I stumbled at a very strange issue. For some reason using arrow functions syntax and backtick literals won’t allow me to pass to the next part of the lesson. Here I show the code so you can see, compare displayStaffStatus with displaySpeedRangeStatus:

import {availableAirplanes, flightRequirements, meetsStaffRequirements, meetsSpeedRangeRequirements} from ‘./airplane’;
const displayFuelCapacity = () => {
availableAirplanes.forEach((element)=>{
console.log(`Fuel capacity of ${element.name}: ${element.fuelCapacity}`);

})
};
const displayStaffStatus = () => {
availableAirplanes.forEach((element)=>{
console.log(`${element.name} meets staff requirements: ${meetsStaffRequirements(element.availableStaff, flightRequirements.requiredStaff)}`);

})
};
function displaySpeedRangeStatus() {
availableAirplanes.forEach(function(element){
console.log(element.name + ' meets speed range requirements: ' + meetsSpeedRangeRequirements(element.maxSpeed, element.minSpeed, flightRequirements.requiredSpeedRange));

});
};
displayFuelCapacity();
displayStaffStatus();
displaySpeedRangeStatus();

Basically the result is exactly the same but the first example won’t allow me to keep going . It’s like it’s forcing me to use a particular syntax? Or am I missing something here?
","



 manucr0807181683:

Or am I missing something here?


No, you’re not missing anything. It’s the LE which is at fault.
I didn’t like the Modules section of that course, mainly because at points you’re required to use ES5 syntax but aren’t adequately told that ES6 will not be accepted. I spent a fair bit of time on that lesson metaphorically pulling my hair out because code I was confident was right failed to pass. I doubt you and I are the only people to run into this and find it frustrating. 
Arrow functions are an ES6 feature, and so you’ll likely not be able to use them throughout the lesson on modules. You can certainly try and code your answers using arrow syntax, but be prepared to refactor if it’s not accepted. 

Hey! thanks for letting me know. At least now I know I’m not just insane (although I was close to becoming insane). 

No worries, that lesson drove me up the wall a bit too! 
"
17,WHALE TALK confussion,Get Help - Java,learn-loops,3,40,"
Loops _ Codecademy - Google Chrome 28.7.2020. 14_11_122560×1440 460 KB
i really got confused here as i was following an instruction and got stuck at this part and then when i went to the the video,the author reads the instruction but does it different.
And i understood his method,but not the INSTRUCTION that was given as it didn’t work for me.
And its not a first time i see that is done differently in a video,plus some instructions can be very confusing.
At least from a perspective of a person that has no developing background and is here to learn.
just to clarify…
instruction says to .push input[i] in resultArray and he did .push with ‘ee’
","



 design1389826683:

instruction says to .push input[i] in resultArray and he did .push with ‘ee’


There are often multiple ways to solve a problem. A valuable skill to have/thing to learn would be to consider different approaches and think about pros and cons of each approach.

hi @stetim94
Yes i understand you and i realize that but that wasn’t the point.
If i’m reading an instruction of something i’m still trying to learn ,and if there is a walkthrough if i cant figure it out i guess the logic would be to do it in a same way as it asks,cause it can be misleading ,
how am i supposed to know the second approach if im here to learn the first…  
But anyway thanks for reply @stetim94,  i’m kind of a slow learner so i get frustrated easily 
"
18,Sleep Debt Calculator Project Issue,Get Help - Java,"conditionals,general",3,34,"
Hello guys. I have been playing with this project Sleep Debt Calculator and have come up with a code like this shown below.
function getActualSleepHours(){
 return Math.floor((Math.random()*8) +4) * 7
}

function getIdealSleepHours(){
  var idealHours = 6.5 * 7
  return idealHours
}

function calculateSleepDebt(){
  var atualSleepHours = getActualSleepHours()
  var idealSleepHours = getIdealSleepHours()

  if (atualSleepHours === idealSleepHours){
    return 'Perfect amount of sleep'
  } else if (atualSleepHours > idealSleepHours){
    return 'Got more sleep than needed'
  } else if (atualSleepHours < idealSleepHours){
    return 'Need some rest'
  }}
console.log(`My ideal sleep hours are ${getIdealSleepHours()} per week.`)
console.log(`I got ${getActualSleepHours()} hours of sleep this week.`)
console.log(calculateSleepDebt()+'.')

Please check the attached image. In first case it was 70 hours which is more than 45.5 but it logs ‘Need some rest’ which is wrong. In second case it was 56 hours which is also more than 45.5 and it logs ‘Got more sleep than needed’.
Is this the editor bug or am I doing something wrong?! Sorry there is image only for 70 hours example because I was not able to add 2 images per post.
Screenshot_11835×835 57.3 KB
","
Actually, here is the second image 
Screenshot_21831×837 57.8 KB


In first case it was 70 hours which is more than 45.5 but it logs ‘Need some rest’ which is wrong.

Think about what your logging to the console vs. what you are computing. Consider what happens when you call your function getActualSleepHours() more than once.
Check your consistency of spelling with actual vs atual. But it shouldn’t make a difference here.
Welcome to the forums 
"
19,Rock Paper Scissors always says User wins but I can't figure out why,Get Help - Java,conditionals,3,27,"


github.com/MikeGalyen/js_rock_paper_scissors








Create 1



        committed 06:27PM - 28 Jul 20 UTC




          MikeGalyen
        



+46
-0










You must select a tag to post in this category. Please find the tag relating to the section of the course you are on E.g. loops, learn-compatibility
When you ask a question, don’t forget to include a link to the exercise or project you’re dealing with!
If you want to have the best chances of getting a useful answer quickly, make sure you follow our guidelines about how to ask a good question.  That way you’ll be helping everyone – helping people to answer your question and helping others who are stuck to find the question and answer! 
","
Try to figure out what the data being passed around is.
Are the inputs for determineWinner() coming in properly? Then the problem is in that function. If not, the problem is at least earlier (if not also in the determineWinner() ).
console.log is a powerful tool here.
Welcome to the forums 

Thanks. I’ll start checking that out.
"
20,Re-creating the Lodash Library: _.dropWhile,Get Help - Java,,9,1411,"
https://www.codecademy.com/paths/web-development/tracks/web-dev-js-arrays-loops-objects/modules/pjs-javascript-capstone/projects/lodash
I’m working on the _.dropWhile method near the end of the Lodash project. I’ve been working on it for a day now and it’s not productive, I’m stuck.  I’ve tried about 100 different approaches. Please help, here’s my latest code:
_.dropWhile = (array, predicate) => {
cb = (element, index) => {
!(predicate(element, index, array));
return index;
};
let dropNumber = array.findIndex(cb);
let droppedArray =  this.drop(array, dropNumber);
return droppedArray;
};
The instructions say this:
37.
Implement : Let’s implement our game plan in code.

Add a method to our  _  object called  dropWhile .
Add two parameters to this method:  array  and  predicate .
Within the method, create a new variable called  dropNumber  and set its value equal to the return value of a call to  findIndex  on  array .
Pass an anonymous callback function to  findIndex  that takes two arguments:  element  and  index .
Within the callback function, return the negated return value of  predicate  called with  element ,  index , and  array . We negate the value (use  ! ) since we are looking to drop elements until the predicate returns a falsy value. However,  .findIndex()  is looking for the first truthy value. So, we make every truthy value falsy and vice versa to get the value we are looking for.
After the entire  dropNumber declaration, create a new variable called  droppedArray and set its value to the return value of  this.drop()  called with  dropNumber . We are using  this  since  .drop()  is a method on the  _  object which is the current object we are working from, and therefore the current value of  this . Calling  _.drop()  would also have worked but is a less common practice.
Return  droppedArray  from the method.

","
Recall that we are writing methods in the _ object.
_.dropWhile = () => {};

vs.
dropWhile () {},

Wow, thanks for clarifying. That solved the problem, writing them using method notation. I had done the entire project using function notation and it passed all the tests up to that point, only failing once _.dropWhile needed to use the this.drop method, and the error message would say 'this.drop is not a function'. I also started the code with const _ = {}; and then added each function/method outside of the object's curly braces by using _.methodName = () => {...}; (terminated with semicolons not commas) which successfully added the functions into the object. Is that aspect of what I did considered acceptable practice? (That is, adding items into the object using _.itemName notation, outside of the object's curly braces).
 I am still confused about the difference between using function notation vs. using method notation. I researched it online but I still don't really understand the resulting difference between a function and a method, and why my program failed only in certain ways when written with function notation. Your thoughts?




 pysurfer30867:

failing once _.dropWhile needed to use the this.drop method


Hopefully your research found that we cannot use this in an arrow function? And that this will refer to the window object when there is no other context in an ordinary function?
We cannot use arrow functions as methods of an object. The old way to define a method in JS was,
    var obj = {
        a: 6,
        b: 7,
        c: function () {
            return this.a * this.b;
        }
    };
    console.log(obj.c());    // 42

The new syntax takes methods from being an anonymous value of a property to being a full-fledged function, of sorts.
var obj = {
    a: 6,
    b: 7,
    c () {
        return this.a * this.b;
    }
};
console.log(obj.c());    // 42

Here’s where it begins to get weird, but the logic is all there…
var obj = {
    a: 6,
    b: 7,
    _c () {
        return this.a * this.b;
    },
    get c () {
        return this._c();
    }
};
console.log(obj.c));    // 42

That covers methods until we get to classes, but you’ll discover they are much the same. The only thing that changes is the context. Our object above is a single entity. If we wish to replicate this N times, then we make it into a class and spin off as any many clones (instances) as we like. That’s coming in later lessons.
Functions are ojbects too, which means a method is an object. That makes sense considering the way we work with them in both the old and the new syntax. The biggest difference between a function and a method is the execution context.
An object has its own reserved namespace which is its own context. Within that context we may define properties (attributes) and behaviors (methods) that apply only to that object. This gives us what we have above.
Now when we think of functions as methods of the window object it puts them into the same light as object methods described above. The exception here is that we do not need to call them on an object. The ‘window’ object is implicit.
function foo() {
    console.log(""Ah, foobar!"")
}
window.foo();    // Ah, foobar!

Functions in other words do not need an object instance to call them, just an identifier and zero or more arguments. Here is where another distinction can be made… this and its close association with methods. Since they are in the context of the object, many methods do not require arguments but draw their data from the object’s own namespace, by the given name, this.
We do not have a mechanism of this nature in a function unless we are referring to window attrbutes, which as globals are accessible by name. Again, no dot syntax. That’s sort of what it really boils down to, isn’t it?
Some TL; DR is bound to come about on some questions. I hope I haven’t gone around the field too many times in this reply.
a = 6;
b = 7;
c = function () {
    return this.a * this.b;
}
console.log(c());           // 42
console.log(this.c());      // 42
console.log(window.c());    // 42

 > c = function () {
       return `${this.a * this.b}, ${a * b}`;
   }
<- ƒ () {
       return `${this.a * this.b}, ${a * b}`;
   }
 > c()
<- ""42, 42""
 > this.c()
<- ""42, 42""
 > window.c()
<- ""42, 42""
 > 


Thank you VERY much! That hugely clarifies a topic that was very murky for me, even after a fair amount of research and quite a few lessons. Very clear explanation, much appreciated.
Part of the reason I spent so much time on that Lodash problem (aside from being a beginner programmer) is because this code:

objectName = {};
objectName.functionName = () => {
console.log(‘Hello’);
};
objectName.functionName();

runs, and it successfully puts these functions into the object. But like you said, arrow notation won’t work inside the curly braces of the object, and this.functionName  fails when it’s done in this way. So the original (incorrect) way I did it didn’t get rejected by the compiler and would run successfully in all of the other cases up to that point, so I spent ages fiddling around with it without the basic understanding needed to solve the issue. Lesson learned. And I learned a lot by going through this mistake. Thanks again for your assistance!




 pysurfer30867:

And I learned a lot by going through this mistake.


Which is lesson learned. Kudos.

I’m at the same topic, I just don’t get why my method isn’t working!
dropWhile: function(arr, predicate){
    let brr = arr;
    while(brr.findIndex(predicate)){
      _.drop(brr);
    }
    return brr;
  }

Seems much cleaner than the solution.

Well I managed to solve this one using:
    dropWhile(arr, pred) {
        while ((pred(arr[0], 0))) {
             arr = this.drop(arr)
         }
         return arr;
     }

Though I couldn’t figure out on my own how to implement findIndex(). I had:
        dropWhile(arr, pred) {
        while (arr.findIndex((element, index) => pred(element, index)) != -1) {
            arr = this.drop(arr);
        }
        return arr;
    }

But this kept failing the last test and ended up returning an empty array. I managed to replicate CC’s answer:
dropWhile(arr, pred) {
        let dropNumber = arr.findIndex((element, index) => !pred(element, index, arr));
        let droppedArray = this.drop(arr, dropNumber);
        return droppedArray
    }

So I’m guessing there’s some sort of funkiness with having an interation inside a while loop.
Also why does the exercise say to pass through 3 arguments into the predicate when the predicate only takes 2?
const indexIsSmallerThanElement = (element, index) => index < element;


Tests passed for me with the below:
 dropWhile(array, predicate){
    let droppedNumber = array.findIndex( (e,idx) => predicate(e,idx,array)===false)
    let droppedArray = array.slice(droppedNumber);
    return droppedArray;
     }

"
21,Questions about number guesser,Get Help - Java,general,4,30,"
Hi,
I am working on the number guesser and have some questions:
If I do not win, there is no message and I can just click “Make a Guess” again until I win. This must be a mistake I made somewhere right? This way the computer has 0 wins.
let humanScore = 0;
let computerScore = 0;
let currentRoundNumber = 1;

// Write your code below:

const generateTarget = () => {
  return Math.floor(Math.random() * 10)
};

  
const compareGuesses = (humanGuess, computerGuess, targetGuess) => {
   
    const humanDiff = getAbdoluteDistance (humanGuess, targetGuess);
    const computerDiff = getAbdoluteDistance (computerGuess, targetGuess);

if (computerDiff >= humanDiff) {
  return true
} else {
  return false
};

};

const updateScore = winner => {
  if (winner === 'human') {
    humanScore ++;
  }
  if (winner === 'computer') {
    computerscore ++;
  }
};


const advanceRound = () => {
  currentRoundNumber ++;
}


const getAbdoluteDistance =  (a1, a2) => {
  return (Math.abs ((a1 -a2)));
}

const alertMessage = (userGuess) => {
  if (userGuess  > 9 || userGuess < 0) {
    alert ('Guess must be between 0 & 9')
  }
}


","
Hey there @datemathomas!!
Is this all of your code?
Currently it seems to be missing something to tie everything together and run the functions, and there are no console.log() so the user gets no messages.
Also could you post a link to the lesson/project?

Here is the project link

Ahh, makes much more sense now.
Have you used developer tools before? If so check your console for errors.


If you don't know how to use Dev Tools
Here is the error being reported:
script.js:34 Uncaught ReferenceError: computerscore is not defined
    at updateScore (VM18 script.js:34)
    at HTMLButtonElement.<anonymous> (VM15 game.js:33)

Though this may seem unconnected to your problem, if you take a look at how game.js is written, you see that this causes a whole function to stop before it can display that the computer won.

"
22,Super() Syntax Error,Get Help - Java,,5,768,"
I have used the super() function before and it has worked perfectly, but now I’m suddenly getting a syntax error that makes no sense.  I’m pretty sure I spelled everything right and I looked back into the lesson and the syntax seems right.
class Media{
  constuctor(title){
    this._title = title
    this._isCheckedOut = false
    this._ratings = []
  }
  get title(){
    return this._title
  }
  get isCheckedOut(){
    return this._isCheckedOut
  }
  get ratings(){
    return this._ratings
  }
  set isCheckedOut(newVal){
    this._isCheckedOut = newVal
  }
  toggleCheckOutStatus(){
    this._isCheckedOut === !this._isCheckedOut
  }
  getAverageRating(){
    let ratingSum = this.ratings.reduce((currentSum, rating) => currentSum + rating, 0)
    let lenOfRatings = ratings.length
    return ratingSum / lenOfRatings
  }
  addRating(newRating){
    this._ratings.push(newRating);
  }
}

class Book extends Media{
  constuctor(title, author, pages){
    super(title);
    this._author = author
    this._pages = pages
  }
   
  get author(){
    return this._author
  } 
  get pages(){
    return this._pages
  }
}

class Movie extends Media{
  constuctor(title, runTime){
    super(title);
    this._runTime = runTime
  }
  get runTime(){
    return this._runTime
  }
}  


","
What is the syntax error saying?

/home/ccuser/workspace/learn-javascript-classes-build-a-library/app.js:34
    this._title = super(title);
                  ^^^^^
SyntaxError: 'super' keyword unexpected here
    at createScript (vm.js:53:10)
    at Object.runInThisContext (vm.js:95:10)
    at Module._compile (module.js:543:28)
    at Object.Module._extensions..js (module.js:580:10)
    at Module.load (module.js:488:32)
    at tryModuleLoad (module.js:447:12)
    at Function.Module._load (module.js:439:3)
    at Module.runMain (module.js:605:10)
    at run (bootstrap_node.js:427:7)
    at startup (bootstrap_node.js:151:9)


Weird right?




 too_toasty:

‘super’ keyword unexpected here


That’s not really the error, though. Just what got flagged because it is unexpected. The real error is the misspelling above it.
The same spelling error occurs in all three classes.

Omfg  I cannot believe I missed that. Lets pretend this never happened 
"
23,Mysterious Organism,Get Help - Java,functions,10,884,"
I am working on Mystery Organism and i am stuck with #7. we are making a factory function that creates an object with one of the properties is named specimenNum. i need specimenNum to increase by one for each object created and im having trouble doing that. This is my code so far.
// Returns a random DNA base
const returnRandBase = () => {
  const dnaBases = ['A', 'T', 'C', 'G']
  return dnaBases[Math.floor(Math.random() * 4)] 
}

// Returns a random single stand of DNA containing 15 bases
const mockUpStrand = () => {
  const newStrand = []
  for (let i = 0; i < 15; i++) {
    newStrand.push(returnRandBase())
  }
  return newStrand
};

const pAequorFactory = (num, seq) => {
  return {
    specimenNum: num++,
    dna: seq,
    mutate(){
      let idx = Math.floor(Math.random() * 15);
      let x = this.dna[idx];
      let y = '';
      do {
        y = returnRandBase();
      } while (x === y);
      if (x !== y) {
        this.dna.splice(idx, 1, y);
      }
      return this.dna;
    },
    compareDNA(obj) {
      let match = 0
      for (x = 0; x < this.dna.length; x++) {
        if (this.dna[x] === obj[x]) {
          match++;
        }
      }
      let percenti = match/obj.length * 100
      let percent = (match/obj.length * 100).toFixed(2);
      return `The two DNA strands have ${percent}% DNA in common.`
    },
    willLikelySurvive(){
      let match = 0
      for (x = 0; x < this.dna.length; x++) {
        if (this.dna[x] === 'C' || this.dna[x] === 'G') {
          match++;
        } 
      }
      let percent = match/this.dna.length * 100;
      if (percent < 60) {
        return false;
      }
      return true;
    }
  }
};


let arr = [];
let count = 0
let match = 0;
do {
  let test10 = pAequorFactory(1, mockUpStrand());
  test10 = test10.willLikelySurvive();
  console.log(test10);
  count++;
  if (test10 === true) {
    match++;
  }
} while (match < 30);
console.log(match)
console.log(count)

","
never mind i figured it out,
my finished code is:
// Returns a random DNA base
const returnRandBase = () => {
  const dnaBases = ['A', 'T', 'C', 'G']
  return dnaBases[Math.floor(Math.random() * 4)] 
}

// Returns a random single stand of DNA containing 15 bases
const mockUpStrand = () => {
  const newStrand = []
  for (let i = 0; i < 15; i++) {
    newStrand.push(returnRandBase())
  }
  return newStrand
};

const pAequorFactory = (num, seq) => {
  return {
    specimenNum: num,
    DNA: seq,
    mutate(){
      let idx = Math.floor(Math.random() * 15);
      let x = this.DNA[idx];
      let y = '';
      do {
        y = returnRandBase();
      } while (x === y);
      if (x !== y) {
        this.DNA.splice(idx, 1, y);
      }
      return this.DNA;
    },
    compareDNA(obj) {
      let match = 0
      for (x = 0; x < this.DNA.length; x++) {
        if (this.dna[x] === obj[x]) {
          match++;
        }
      }
      let percenti = match/obj.length * 100
      let percent = (match/obj.length * 100).toFixed(2);
      return `The two DNA strands have ${percent}% DNA in common.`
    },
    willLikelySurvive(){
      let match = 0
      for (x = 0; x < this.DNA.length; x++) {
        if (this.DNA[x] === 'C' || this.DNA[x] === 'G') {
          match++;
        } 
      }
      let percent = match/this.DNA.length * 100;
      if (percent < 60) {
        return false;
      }
      return true;
    }
  }
};


let arr = [];
let count = 0
let match = 0;
let counter = 1
let counters = 0
do {
  let test10 = pAequorFactory(counter, mockUpStrand());
  test11 = test10.willLikelySurvive();
  counter++
  if (test11) {
    match++;
    counters++;
    arr.push({Test: test10.specimenNum, Completed: counters, DNA: test10.DNA})
  }
} while (match < 30);
console.log(arr);


thanks for posting your code it really helped me understand what to do in the project. I tried to only look at it for reference rather than a cheat.

Bravo!   

I’m currently stuck on this milestone/task
4)Your team wants you to simulate P. aequor ‘s high rate of mutation (change in its DNA).
To simulate a mutation, in pAequorFactory() ‘s returned object, add the method .mutate() .
.mutate() is responsible for randomly selecting a base in the object’s dna property and changing the current base to a different base. Then .mutate() will return the object’s dna.
What is the current base that the task refers to here? Is it dna[specimenNum]?

Hi!
I’m testing your code and the the method .compareDNA returns “The two DNA strands have NaN% DNA in common”. As far as I know NaN stands for “Not a number”. Do you have any idea what goes wrong here?
This is my piece of code steps 1-5. It looks exactly like yours - I just changed some names and added console.log lines to test the code.
// Returns a random DNA base
const returnRandBase = () => {
  const dnaBases = ['A', 'T', 'C', 'G']
  return dnaBases[Math.floor(Math.random() * 4)] 
}

//console.log(returnRandBase());

// Returns a random single stand of DNA containing 15 bases
const mockUpStrand = () => {
  const newStrand = []
  for (let i = 0; i < 15; i++) {
    newStrand.push(returnRandBase())
  }
  return newStrand
}

//console.log(mockUpStrand());

//3-4
const pAequorFactory = (number, array) => {
  return {
    specimenNum: number,
    DNA: array,

    mutate() {
      let index = Math.floor(Math.random() * 15);
      let x = this.DNA[index];
      let y = '';
      do {
        y = returnRandBase();
      } while (x === y);
      if (x !== y) {
        this.DNA.splice(index, 1, y);
      }
      return this.DNA;
     },

//5
    compareDNA(obj) {
      let match = 0
      for (i = 0; i < this.DNA.length; i++) {
        if (this.DNA[i] === obj[i]) {
          match++;
        }
      }
      let percenti = match/obj.length * 100
      let percent = (match/obj.length * 100).toFixed(2);
      return `The two DNA strands have ${percent}% DNA in common.`
    }
   }
  };

let species1 = pAequorFactory(1, mockUpStrand());
console.log(species1.DNA)
species1.mutate();

let species2 = pAequorFactory(2, mockUpStrand());
console.log(species2.DNA)
species2.mutate();

console.log(species1.compareDNA(species2));


The output:
[ ‘A’, ‘A’, ‘C’, ‘A’, ‘G’, ‘A’, ‘T’, ‘C’, ‘G’, ‘A’, ‘C’, ‘C’, ‘G’, ‘A’, ‘G’ ]
[ ‘G’, ‘T’, ‘C’, ‘T’, ‘G’, ‘C’, ‘A’, ‘C’, ‘G’, ‘T’, ‘C’, ‘C’, ‘G’, ‘G’, ‘T’ ]
The two DNA strands have NaN% DNA in common.
PS. I’m having red brackets, I guess there’s an error somewhere but have no idea where - I went through the entire code many times but still no clue.

It’s because you’re trying to compare against and find the length of the Object whereas it should be the DNA  property of the object.

How would you write that line of code?

obj.DNA[i]

So:
compareDNA(obj) {
      let match = 0
      for (i = 0; i < this.DNA.length; i++) {
        if (this.DNA[i] === obj.DNA[i]) {
          match++;
        }
      }
      let percenti = match/obj.length * 100 //this isn't even being used
      let percent = (match/obj.DNA.length * 100).toFixed(2);
      return `The two DNA strands have ${percent}% DNA in common.`
    }
   }
  };


Ahh right! Thank you very much 
"
24,Magic Eight Ball - String Interpolation,Get Help - Java,"conditionals,general",4,52,"
Hi I’m struggling with string interpolation on the Magic Eight Ball project.
My code is below. Rather than printing the string for the variable within {}, the code reader is printing what is actually typed. Instead of  'Will I die this year?' console logs {userQuestion}
ok so when I posted this it’s not registering the dollar sign for some reason…? I guess part of my problem?
let userName = ‘’;
userName ? console.log(‘Hello, ${userName}!’) : console.log(‘Hello!’);
const userQuestion = ‘Will I die this year?’;
console.log(‘The user asked: ${userQuestion}’);
const randomNumber = Math.floor(Math.random() * 8)
let eightBall = ‘’
switch (randomNumber) {
case 0:
console.log(‘It is certain’);
break;
case 1:
console.log(‘It is decidely so’);
break;
case 2:
console.log(‘Reply hazy try again’);
break;
case 3:
console.log(‘Cannot predict now’);
break;
case 4:
console.log(‘Do not count on it’);
break;
case 5:
console.log(‘My sources say no’);
break;
case 6:
console.log(‘Outlook not so good’);
break;
case 7:
console.log(‘Signs point to yes’);
break;
}
","
Hi! The problem is that you used quotation marks instead of the ticks.
console.log(‘The user asked: ${userQuestion}’);

Instead of
console.log(`The user asked: ${userQuestion}`);


I had the same problem!! Thank you - but why do the quotations work on some strings, but not on these? Is it specifically because it is string interpolation?




 system6641638027:

Is it specifically because it is string interpolation?


Yep. If you’re using string concatenation or just writing a regular string, you have to use quotation marks.
"
25,MIni Linter Project,Get Help - Java,"learn-iterators,general",3,41,"
let story = 'Last weekend, I took literally the most beautiful bike ride of my life. The route is called ""The 9W to Nyack"" and it actually stretches all the way from Riverside Park in Manhattan to South Nyack, New Jersey. It\'s really an adventure from beginning to end! It is a 48 mile loop and it basically took me an entire day. I stopped at Riverbank State Park to take some extremely artsy photos. It was a short stop, though, because I had a really long way left to go. After a quick photo op at the very popular Little Red Lighthouse, I began my trek across the George Washington Bridge into New Jersey.  The GW is actually very long - 4,760 feet! I was already very tired by the time I got to the other side.  An hour later, I reached Greenbrook Nature Sanctuary, an extremely beautiful park along the coast of the Hudson.  Something that was very surprising to me was that near the end of the route you actually cross back into New York! At this point, you are very close to the end.';

let overusedWords = ['really', 'very', 'basically'];

let unnecessaryWords = ['extremely', 'literally', 'actually' ];

let storyWords = story.split(' ');

console.log(storyWords.length);

let betterWords =  storyWords.filter (word => {
  return !unnecessaryWords.includes(word)
});

console.log(betterWords.length);

point 4 

let reallyCount = 0;
let veryCount = 0;
let actuallyCount = 0;

for (word of storyWords) {
  if (word === 'really') {
    reallyCount += 1
  } else if (word === 'very') {
    veryCount += 1
  } else if ( word === 'basically') {
    actuallyCount += 1
  }
  }

let sentencesCount = 0

for (word of storyWords) {
  if (word[word.length - 1] === ""."" || word[word.length - 1] === ""!"") {
    sentencesCount += 1
  }
}

console.log(""Word Count"", storyWords.length);
console.log(""Sentences Count"", sentencesCount);
console.log(""Really appears "", reallyCount);
console.log(""very appears "", veryCount);
console.log(""Actually appears "", actuallyCount);

console.log(betterWords.joint ("" ""))

What is wrong  with this code above ? I followed the project walkthrough many times and I even tried my own functions and nothing seems to clear up the error screen. Please help!
","
Have you read what the errors are telling you. They are generally very useful and point out areas that need looking into. A lot of people just ignore them and try and hack away trying to solve the issue but listen to the stacktrace, it’s useful.
So I copied your code and ran it and there’s an error pointing to line 17, unexpected number.
What are you attempting to achieve with point 4?  Is that meant to be a comment indicating it’s part 4 of the exercise?
Commenting that out, the next error is pointing to TypeError: betterWords.joint is not a function. I would suggest taking a look at the documentation and looking up the “joint” method…
Look into those and then your code should be fine.

Thank you for your reply.  there are some points that that I do not understand in that documentation but i will try to run the exercise from scratch again.
"
26,Number vs Numbers as variable?,Get Help - Java,,17,2898,"
Good morning, I had a question regarding this following example code below. Specifically, is it significant that you used the term number and not numbers in the numbers.map() method’s callback function?
const bigNumbers = numbers.map(number => {
return number * 10;
});
Thank you.
","
number is the parameter, map will pass each value from the numbers array to the parameter. Thus number is a very good name.
you could even name the parameter bar:
const bigNumbers = numbers.map(bar => {
   return bar * 10;
});

bar is not very descriptive, its just to demonstrate what is what.

So in the example they start out by manipulating the array called “numbers,” but then after the arrow function the variable manipulated is just called ‘number’. What am I missing? Does Javascript recognize plurals?




 carlyraejepsenstan:

Does Javascript recognize plurals?


no.
number is a parameter. The map method calls the function for each element in the array and passes the current value to the parameter.


photo.jpg900×900 77.7 KB


Hi there,
Hoping you can help. I am still struggling with why this, for example, works:

const groceries = [“item1”, “item2”, “item3”]
function printGrocery(element){
console.log(element);
}
groceries.forEach(printGrocery);

I understand that for each item in the groceries array the function printGrocery will be executed.
What I just cannot get my head around is why the printGrocery function understands what ‘element’ as a parameter represents. To me it seems like it is inexplicably able to know that element is an item in the array.
I am able to make the code run in all the exercises but I am doing it without a true understanding of what is happening.
I know that my misunderstanding here is pretty fundamental and the explanations already in this thread would be sufficient for most, so your patience and explanations are appreciated.
Thanks,
K




 digital1342033411:

groceries.forEach(printGrocery);


Array.forEach() iterates its context array and returns nothing. We write the action in the form of a function, or callback. That function is called on each iterated value in the array.
printGrocery() is the callback function written as a standalone object, making it useful to the whole program, not just this one method call.
Array.forEach(callbackName)

We pass the function name only, without invoking it (pass by reference). The iterator will invoke it using the internal iteration variable as argument, which is represented in the function parameter by element.
Let’s slip back to a normal for loop to illustrate the abstracted work done by the iterator…
for (let x of array) {
    printGrocery(x);
}

The iteration variable x is the akin to the internal variable to which we earlier alluded.
of is the membership operator that first appeared in ES2015 and quickly took hold as a useful tool in ES6. It works equally well with strings or arrays.

Let’s translate the standalone back into a callback expression…
groceries.forEach(x => console.log(x));

Now we can extract that expression and make it a standalone…
const printGrocery = x => console.log(x)

and now,
groceries.forEach(printGrocery);

Starting to click?

Having a standalone function that can stand in as a callback and as a utility function to the rest of the program has more bang for the buck  Let’s make our standalone into a generic function.
const log = x => console.log(x);

groceries.forEach(log);

anyArray.forEach(log);

log('Math is fun')    // Math is fun

In the beginning It was confusing for me too, so instead I use x as a parameter, like this:
const bigNumbers = numbers.map( X=> {
return X * 10;
});
Once you get use to it, you can go back to normal.
Honestly you can use any word, so make up yours… personal…




 pnfyorch:

so make up yours… personal…


Quite the contrary. Don’t make it personal. Make it public. How would we best portray this object in the public view. Given a list of numbers it makes perfect sense in the real world, the public one, to describe the individual values as, number.
for number in numbers

number => number * 10

Don’t be frivolous when choosing variable names. Be practical and respectful of your readers.

Using the X as a parameter helped me so much! Thank you!

mtf, I appreciate your direction about readability for others but for learning, I also think that X or eachNumber or just reusing bigNumbers is easier to get the idea and avoid single-character typos. For example below, using the same reference as the original array helped me to understand the idea better. I bet this could cause other problems later but it helped to initially understand that number is just each value in the numbers array.
const smallNumbers = bigNumbers.map(bigNumbers => {
return bigNumbers / 100
})

Consider,
f(x) = ax + b

a and b are constants, and x is the variable.
const smallNumbers = bigNumbers.map(x => x / 100)

What makes it difficult to understand what x is doing, above?

Hello, I am getting confused.
This is the correct code:
const smallNumbers = bigNumbers.map(num => num/100);
My version was:
onst smallNumbers = bigNumbers.map(bigNumber{
return bigNumber / 100;
});
what did I do wrong in this?




 k3nda1:

bigNumber{


Missing the fat arrow.

Oh! I see totally looked over that, but would using bigNumber over num be ok?

The name we choose is up to us, so long as it doesn’t collide with other variables and is not a reserved word keyword. In a callback it is not necessary to give a variable a name. A simple letter is enough. Everything is right there, and we know it is an iterative process. Simple names means simple to read and debug, in many cases.

Ok Thank you!  
"
27,Why is `favorite_Phase === 'Love That!'` required?,Get Help - Java,conditionals,36,22737,"
So in the exercise it said this was the correct answer
let favoritePhrase = ‘Love That!’;
favoritePhrase === ‘Love That!’ ? console.log(‘I love that!’) : console.log(“I don’t love that!”);
how come it still goes through when the favoritePhrase  equals something different then what the console has in it. The only difference is the ‘I’. How come it still goes through when the favoritePhrase  doesn’t equal whats in the console?
","



 chipblaster27944:

favoritePhrase === ‘Love That!’ ?


The string literal in the condition does not have any relation to the string literals in the logged values. Those are outcomes relating to do or don't.

The solution is presented as below in this exercise:
favoritePhrase === ‘Love That!’ ? console.log(‘I love that!’) : console.log(“I don’t love that!”);
Because we are asked to refactor the  if...else  block to use a ternary operator, shouldn’t there be only a ? instead of === ‘Love That!’ just like in the two previous steps?




 cgg:

shouldn’t there be only a ? instead of === ‘Love That!’


The ternary operator needs a conditional expression to precede it, hence, ?
'is this true' ? 'yes' : 'no'

console.log(a === 42 ? ""The meaning of life"" : ""Nope!"");

Notice that the entire expression can be written as an argument to a function or method?
The lesson solution follows this pattern…
conditional ? action if truthy : action if falsy

The ‘action’ is itself a statement. In my example the ternary is what gets passed to the action.

Thanks, mtf. Maybe I should have shared more of the code here to make my question clearer:
let favoritePhrase = ‘Love That!’;
favoritePhrase === ‘Love That!’ ? console.log(‘I love that!’) : console.log(“I don’t love that!”);
I guess my question is… can we not simply write favoritePhrase ? instead of favoritePhrase === ‘Love That!’ ? as the value has already been assigned to the variable earlier?




 cgg:

as the value has already been assigned to the variable earlier?


We need the complete expression since we are testing whether the variable was set, or not, to the correct value. Think of a dynamic state where the program doesn’t know this.
a = Math.floor(Math.random() * 42) + 1
console.log(a === 42 ? ""The meaning of life"" : ""Nope!"");
// Nope!

The test doesn’t know the value of a but insists that it is 42 in order to follow the truthy branch.
conditional ? truthy branch : falsy branch

A conditional can also be a state.
r = Math.floor(Math.random() * 2);    // 0 or 1
console.log(r ? 'set' : 'not set');   // not set on 0

Thanks again, mtf. I believe we didn’t need to test it (whether the variable was set, or not, to the correct value) with the following code (that was written earlier in the same exercise) as in those cases the variables were already assigned to true or false. Did I get right?
let isLocked = false;
isLocked ? console.log(‘You will need a key to open the door.’) : console.log(‘You will not need a key to open the door.’);
let isCorrect = true;
isCorrect ? console.log(‘Correct!’) : console.log(‘Incorrect!’);

Keep in mind, it is you who knows the value that is set, not the computer. We write it in the code so we must know it. The computer does not. Remember, computers are dumb. Since it is the computer running our program it falls to us to be sure there is correct information in the pike. That takes testing (conditionals).
Variables that are set have state; those that are not are undefined. There are lots of ways to consider state, so don’t carve it in stone.
let z
console.log(z)    // undefined
console.log(z ? 'state is truthy' : 'state is falsy')   // state is falsy
z = 0
console.log(z ? 'state is truthy' : 'state is falsy')   // state is falsy

Hello! I’ve read the above threads and can’t find the answer I’m looking for.
My question:  In the below solution, I don’t understand why we don’t write isfavoritePhrase
Why does the solution omit the “is?”
The first two lines have the is. Thank you!!
let isLocked = false;
isLocked ? console.log(‘You will need a key to open the door.’) : console.log(‘You will not need a key to open the door.’);
let isCorrect = true;
isCorrect ? console.log(‘Correct!’) : console.log(‘Incorrect!’);
let favoritePhrase = ‘Love That!’;
favoritePhrase === ‘Love That!’ ? console.log(‘I love that!’) : console.log(“I don’t love that!”);

The is is part of the variable name in each case. It has no significance other than readability. The variables, isLocked and isCorrect are booleans, so it helps the reader to understand by adding is to the beginning of the name. It’s kinda like saying, “Is the door locked?” The favoritePhrase variable is just pointing to a string. It’s kinda like saying, “My favorite phrase is, Love That!”
This code would produce the exact same results, but may be harder to follow:
let hotDog = false;

hotDog ? console.log(‘You will need a key to open the door.’) : console.log(‘You will not need a key to open the door.’);

let potato = true;

potato ? console.log(‘Correct!’) : console.log(‘Incorrect!’);

let p = ‘Love That!’;

p === ‘Love That!’ ? console.log(‘I love that!’) : console.log(“I don’t love that!”);

Hope this helps!

I guess so.  so, use is__ ? with a boolean and just ? with a string.
or maybe the is isn’t necessary
thank you for helping!!

In the lessons, you have to use the variable names they ask you to use in order to pass each step. In your own programming, you can name most any variable almost anything you want (there are exceptions like keywords ie. for, let, const, if, etc.). Using names like isHot gives the reader a clue that it’s probably a boolean, but it’s not necessary, and certainly not required. You will eventually come up with your own naming schemes. The first person to not confuse is yourself, the programmer. If you can make it easier for other programmers to read, that’s great, but whether or not your code works as expected won’t be impacted by how you name your variables.

Just re-read your comment, and might be able to clarify further.
The ? is the ternary operator. It’s like shorthand for an if statement.
This:
let isHot = true;
isHot ? console.log(""Ouch! That burns!"") : console.log(""Whew. Glad it wasn't hot!"");

is the same as this:
let isHot = true;
if (isHot) {
  console.log(""Ouch! That burns!"");
} else {
  console.log(""Whew. Glad it wasn't hot!"");
}

In the example using the ternary operator ? the : represents else. If the condition on the left of the ? is true, the code before the : is executed. If it’s false, the code following the : is executed. In either case, if we replaced isHot with elephant for example, the code would work exactly the same, but a future programmer might wonder what I’d been drinking when I wrote it. 

Thank you! I shall think on these things. 

let isHot = true;
isHot ? console.log(""Ouch! That burns!"") : console.log(""Whew. Glad it wasn't hot!"");

can be further simplified to a single console.log()…
console.log(isHot ? `Ouch! That burns!` : `Whew. Glad it wasn't hot!`);


I ran into the same confusion and I think this reply is the best response… From what I’ve gathered, plz correct me if I’m wrong, the reason the first 2 examples work are because they are booleans. They already have a true/false value so the computer can use that value. The string value (and I’m assuming any value that is not boolean) needs something written into the ternary operator to compare to the variable to decide if it is true or false… Is that right? lol

A ternary conditional can take any expression as the condition…
condition ? true_outcome : default_outcome

Expressions can be numbers, strings, comparisons, even a function call. Anything that can be cast to a boolean.
console.log('a' ? 'non-empty string' : 'empty string')
// non-empty string
console.log('' ? 'non-empty string' : 'empty string')
// empty string
console.log(42 ? 'non-zero number' : 'zero')
// non-zero number
console.log(0 ? 'non-zero number' : 'zero')
// zero

I get that all data type are applicable… When you predetermine a variable though, I’m wondering why you have to include the initial “” favoritePhrase === “Love that!” “” The other statements can just determine t/f and the predetermined variables happen to be booleans, but this one requires you to tell it what to argue against the variable, I guess because they aren’t booleans to begin with? Example:
let isLocked = false;
isLocked ? console.log(‘You will need a key to open the door.’) : console.log(‘You will not need a key to open the door.’);
-(only “?” is needed)
let favoritePhrase = ‘Love That!’;
favoritePhrase === ‘Love That!’ ? console.log(‘I love that!’) : console.log(“I don’t love that!”);
(here “=== ‘Love That!’” is required… Why?)

To answer OP’s question though, the console will print whatever you tell it to. Not necessarily the data contained in the variable, unless you tell the console to print the variable.
In this instance, the variable  favoritePhrase  contains the string  Love That! , that’s the data inside the variable. The  ternary operator  only determines if the variable is true or false, then displays whatever you tell it to based on if it’s  true  or  false .




 reyxco1248:

favoritePhrase === “Love that!”


This is referred to as an identity comparison, as in are these two operands exactly alike?
Comparisons are assertions that yield a true or false response.
The above comparison has no shortcut but to face-off each operand with the identity operator. There can be only one result.
Value resolution is how expressions work. isLocked ? ... : ...; contains an expression in the condition of the ternary that resolves to an either/or state, and is easily coerced to a boolean.
The expression could naively be written as a comparison, but given the above rather moot.
isLocked === true ? ... : ...;

It’s not a comparison we need to make given value resolution which does this for us.

Aside
When calling the same function from either branch of a ternary, it is simpler to call the function on the ternary.
console.log(favoritePhrase === ‘Love That!’ ? ‘I love that!’ : 'I don’t love that!');
"
28,Why we dont call the function direct,Get Help - Java,,6,32,"
Hi
I am having a little trouble here why we dont call the function direct instead we are calling through another  anonymous  function.
const eventAssignment = (note) => { 
  note.onmousedown = function() {
    keyPlay(event);
  };
  note.onmouseup = function() {
    keyReturn(event);
  };
}

A little light on this matter please why the following is an issue
let eventAssignment = function(note){
  note.onmousedown = keyPlay;
  note.onmouseup = keyReturn;
  
}

kind regards
","
We will need a link to the exercise to be able to check your code.
One question I have just looking at the parameter… Is this function called on every key? Or is it a run once function that is supposed to register all the keys in one go?

Hi
Sorry for the missing information  Following is the topic
Piano Keys
My GitHub code
Kind Regards
Atif

So it is a loop calling the function. Did you try the other approach?

Hi
It is working fine for me but the video for this project the instructor mentioned not to do this for some reason which is not explained point by point like what happens if we are not doing his way. (with example
Following is his way
let eventAssignment = function (note) {
   note.onmousedown = function () {
        keyPlay(event);
    }
    note.onmouseup = function () {
        keyReturn(event);
    } 
}

But what i did and looks working fine is the following
let eventAssignment = function (note) {
    note.onmousedown = keyPlay;
    note.onmouseup = keyReturn;
}

Following is the video link where he is explaining this point (like if we do this way it will redefine this function???) Did we cover this is in our course so far. How someone knows which way is the right way.
Step 4
Kind Regards
Atif

His explanation is so vague, no wonder nobody can understand it. The callback reference does indeed work as expected. I’m not sure what it is that is being redefined. We need to do some deep reading into events and event handlers, which is a natural progression when learning something new like this. Don’t stop at just the lessons. Read up the documentation and any articles about do’s and don’t’s.
"
29,Form submission not working,Get Help - Java,general,5,65,"
I am trying to practice API use by building my own version of the Wanderlust project. However I do not know how to link the submission of the search query to javascript. Whenever submit is pressed the page just reloads, reloading all the background JS with it and so no query is sent.
Can anyone explain what I am missing here?
","
reading some documentation might help to understand form behavior:
https://developer.mozilla.org/en-US/docs/Learn/Forms/Your_first_form
https://developer.mozilla.org/en-US/docs/Learn/Forms/Sending_and_retrieving_form_data
As you can read in the docs:
The method attribute defines how data is sent. The HTTP protocol provides several ways to perform a request;
but if we work with JS, we don’t want the default http protocol. So you will need to a way to prevent that.

I wish I could say that it did help but it really didn’t 
Perhaps I’m not explaining my problem properly…
All I want to do is for a user to input a string and for me to be able to grab that value and feed it in to my JS as a string variable, which will ultimately be fed in to an endpoint link for an API call. Now I have the API all set up using Async/Await, but I’m struggling to take that user input and grab it as a simple string that can be stored in a variable?

The first step is understanding forms, and how forms work. The earlier versions of forms used http to send the form, resulting a response.
Given this was how forms work in the beginning, this is still the default behavior
Without understanding these fundamentals, you can’t progress to the next step
The next steps then would be:
prevent the form being send with http(s)
read the data from the input field
send the form using JS
Sure, I could tell you how all this could be done. But then you would just get stuck later on. You need to take some time to understand this process.
Have you figured out how to prevent the form from submitting? If not, that would the first step to search for. Something: javascript prevent form submission

e.preventDefault() Thanks! 
"
30,Can someone tell me what is wrong here?,Get Help - Java,"learn-classes,general",2,33,"
Can someone tell me what i am doing wrong here?
console.log(determineWinner('scissors', 'rock'));
= it’s supposed to be ‘computer won’ , but it isn’t
console.log(determineWinner('paper', 'scissors'));
= it’s also supposed to be ‘computer won’ but it isn’t
console.log(determineWinner('rock', 'paper'));
in the guide, they recommended to use this “Inside the  if  statement’s block, write another  if / else  statement” but i’d like to use “and operator &&”
did i something wrong? pls help me


gist.github.com


https://gist.github.com/codecademydev/0d438544b73fa4a73b60b8436b4d3374
rockPaperScissors.js
const getUserChoice = userInput => {
  userInput = userInput.toLowerCase();
  if(userInput ==='rock' || userInput ==='paper' || userInput ==='scissors'){
    return userInput;
  } else {
    console.log('Error message. please try it later');     
  } 

}
console.log(getUserChoice('paper'));//should print 'paper'
This file has been truncated. show original







","
Hello @system8588545037, welcome to the forums!
The problem is with this line (line 31 else block):
} else {
   return 'user won';
 } 

Here, unless the userChoice is rock and the computerChoice is paper, the function will always return 'user won'.
I hope this helps!
"
31,Can someone tell me what is wrong here?,Get Help - Java,learn-classes,3,45,"
Can someone tell me what I am doing wrong here? My PrimarySchool class doesn’t seem to be extending the School class.  I know I’m missing something tiny.
https://www.codecademy.com/courses/introduction-to-javascript/projects/school-catalog
class School {

  constructor(name, level, numberOfStudents) {

    this._name = name;

    this._level = level;

    this._numberOfStudents = numberOfStudents;

  }

  get name() {

    return this._name;

  }

  get level() {

    return this._level;

  }

  get numberOfStudents() {

    return this._numberOfStudents;

  }

  set numberOfStudents(value) {

    if (typeof value === 'Number') {

      this._numberOfStudents = value;

    } else {

      console.log('Invalid input: numberOfStudents must be set to a Number.');

    }

  }

  quickFacts() {

    console.log(`${this.name} educates ${this.numberOfStudents} students at the ${this.level} school level.`);

  }

  static pickSubstituteTeacher(substituteTeachers) {

    const substituteIndex = Math.floor(substituteTeachers.length * Math.random());

    return substituteTeachers[substituteIndex];

  }

}

class PrimarySchool extends School {

  constructor(name, numberOfStudents, pickupPolicy) {

    super(name, 'primary', numberOfStudents);

    this._pickupPolicy = pickupPolicy;

  }

    get pickupPolicy() {

      return this._pickupPolicy;

    }

}

const lorraineHansbury = new PrimarySchool('Lorraine Hansbury', 514, 'Students must be picked up by a parent, guardian, or a family member over the age of 13.');

lorraineHansbury.quickFacts();

lorraineHansbury.pickSubstituteTeacher(['Jamal Crawford', 'Lou Williams', 'J. R. Smith', 'James Harden', 'Jason Terry', 'Manu Ginobli']);

","



 design9529224761:

My PrimarySchool class doesn’t seem to be extending the School class


what makes you think this?
I think the problem is that you don’t call your static method correctly. What is special about static methods?

I see a problem where you are validating your number using typeof:
if (typeof value === 'Number') {

Try changing this to :
if (typeof value === 'number') {

Check if that works!!
"
32,Mini linter project (scope issue?),Get Help - Java,"learn-iterators,general",3,28,"
Hi
I am kind of stuck in the Mini linter project.
In part 4, I am asked to count overused words. I am able to log the words and quantity of each word to console. See code below. But I want to return the values to use them later in my code, instead of just logging them to console inside my function block. How can I achieve this?
Can I make my function output these values?
//count overused words
let overUsed = () => { //creating function to count overused words

let n = 0; //variable for counting overusedwords

overusedWords.forEach(word => { //iterates through overusedWords
  
n = 0; //resets the counter variable n for each overused word

  betterWords.forEach(words => { //iterates through betterWords

    if (word === words) //checks if word exists in both lists

    n++; //adds one to the counter
     })  

    console.log( `${word}: ${n}`); //logs the word and number to console
})  //tried to ""return word"" here, but I got an error message.
}

overUsed(); //calling my function, returns this in console: 
//really: 2
//very: 5
//basically: 1

Instead of logging to console, could I store the values in an array for example?
I am completely new to this, and i hope someone can help me.
","
This might be a case in which an Associative Array (an Object) would be helpful.
You’ll want to assign the value of each word to be n in that object, as shown here.
You can then return the Object you’ve created.

Thanks, but I could not get it to work.  Didn’t quite understand.
However, I found another solution which worked after a bit of trial and error.
I created an empty array (global), and instead of the console.log-statement in my original code, I .pushed the values to the array. 
"
33,Why isn't this loop outputting anything?,Get Help - Java,"learn-loops,general",3,23,"
This is my loop. Why isn’t it logging to the console?
for (let count = 3; count > 8; count++){
  console.log(count);
}

","
Hello! It isn’t outputting because your condition is run the loop while count is greater than 8. Since count is less than 8, the loop will never run, as the condition is never met.
I hope this helps!

Ohhhh, I feel stupid now 
I thought it was the other way around, that it would stop when it reached that value…
Thanks for the quick reply 
"
34,Piano Keys,Get Help - Java,,16,534,"
Strange thing happened on this project.  The C key is doubled.  I haven’t touched the html or css code.  It been like this from the start.

d3d64fefcc4c598c493daa0f7399b7596c7cda59.png1366×768 254 KB

","
Please post your HTML and a link to the exercise.

https://www.codecademy.com/courses/build-interactive-websites/projects/piano-keys
<!DOCTYPE html>
<html lang=""en"" >

<head>
  <meta charset=""UTF-8"">
  <link rel=""stylesheet"" href=""style.css"">
</head>

<body>
  <p class='title'>Piano Player</p>
  <p id='demo'>Follow the song below to play  the piano.</p>
  <section class=""piano"">
    <section id='c-key' class=""key"">
      <section class='keynote'>C</section>
    </section>
    <section id='c-sharp-key' class=""black-key"">
      <section class='black-keynote'>C#</section>
    </section>
    <section id='d-key' class=""key"">
      <section class='keynote'>D</section>
    </section>
    <section id='d-sharp-key' class=""black-key"">
      <section class='black-keynote'>D#</section>
    </section>
    <section id='e-key' class=""key"">
      <section class='keynote'>E</section>
    </section>
    <section id='f-key' class=""key"">
      <section class='keynote'>F</section>
    </section>
    <section id='f-sharp-key' class=""black-key"">
      <section class='black-keynote'>F#</section>
    </section>
    <section id='g-key' class=""key"">
      <section class='keynote'>G</section>
    </section>
    <section id='g-sharp-key' class=""black-key"">
      <section class='black-keynote'>G#</section>
    </section>
    <section id='a-key' class=""key"">
      <section class='keynote'>A</section>
    </section>
    <section id='a-sharp-key' class=""black-key"">
      <section class='black-keynote'>A#</section>
    </section>
    <section id='b-key' class=""key"">
      <section class='keynote'>B</section>
    </section>
    <section id='high-c-key' class=""key"">
      <div class='keynote'>C</div>
    </section>
  </section>

  <section id='lyrics'>
    <section id='column-one'>
      <section id=""word-one"">HAP-</section>
      <section id=""letter-note-one"">G</section>
    </section>
    <section id='column-two'>
      <section id=""word-two"">PY</section>
      <section id=""letter-note-two"">G</section>
    </section>
    <section id='column-three'>
      <section id=""word-three"">BIRTH-</section>
      <section id=""letter-note-three"">A</section>
    </section>
    <section id='column-four'>
      <section id=""word-four"">DAY</section>
      <section id=""letter-note-four"">G</section>
    </section>
    <section id='column-five'>
      <section id=""word-five"">TO</section>
      <section id=""letter-note-five"">C</section>
    </section>
    <section id='column-six'>
      <section id=""word-six"">YOU</section>
      <section id=""letter-note-six"">B</section>
    </section>
    <section id='column-optional' class='column-optional'>
      <section id=""word-optional"">END</section>
      <section id=""letter-note-optional"">A</section>
    </section>

    <button id=""first-next-line"">Line 2</button>
    <button id=""second-next-line"">Line 3</button>
    <button id=""third-next-line"">Line 4</button>
    <button id=""fourth-next-line"">Reset</button>
  </section>

  <script  src=""main.js""></script>

</body>
</html>


That is the high-c key wrapping which means the container might not be wide enough. Please post the CSS so we can take a closer look.

body{
  margin: 0;
  padding: 0;
  font-family: sans-serif;
  background: #ffc63f;
}
.title{
  font-size: 36px;
  margin-top: 10px;
  margin-bottom: 0px;
  padding: 0;
  color: #141c3a;
  text-transform: uppercase;
  letter-spacing: 2px;
  text-align: center;
}
#demo{
  text-align: center;
  font-size: 18px;
  margin-top: 15px;
  color: #141c3a;
  letter-spacing: 1px;
  font-style: italic;
}
.piano{
  width: 305px;
  height: 210px;
  display: block;
  margin: 0 auto;
  background-color: #fd4d3f;
  margin-top: 30px;
}
.key{
  width: 30px;
  height: 200px;
  display: inline-block;
  border: solid #141c3a 2px;
  box-shadow: 2px 5px;
  background-color: white;
  color: #141c3a;
}
.black-key{
  width: 25px;
  height: 100px;
  display: inline-block;
  background-color: #141c3a;
  color: white;
  position: absolute;
  margin-left: -12px;
  padding: 0px;
}
.keynote{
  width: 20px;
  height: 20px;
  text-align: center;
  display: block;
  margin: 0 auto;
  margin-top: 175px;
  color: #141c3a;
}
.black-keynote{
  width: 20px;
  height: 20px;
  text-align: center;
  display: block;
  margin: 0 auto;
  margin-top: 75px;
}
#lyrics{
  width: 400px;
  height: 240px;
  display: block;
  margin: 0 auto;
  padding-left: 20px;
  margin-top: 50px;
  background-color: #fd4d3f;
}
#column-one, #column-two, #column-three, #column-four, #column-five, #column-six, #column-optional{
  width: 90px;
  display: inline-block;
  text-align: center;
  margin-top: 30px;
}
#column-optional{
  display: none;
}
#word-one, #word-two, #word-three, #word-four, #word-five, #word-six, #word-optional{
  background-color: white;
  width: 90px;
  height: 25px;
  padding-top: 10px;
  letter-spacing: 5px;
  color: #141c3a;
}
#letter-note-one, #letter-note-two, #letter-note-three, #letter-note-four, #letter-note-five, #letter-note-six, #letter-note-optional{
  color: white;
  width: 25px;
  height: 25px;
  margin-top: 15px;
  margin-left: 35px;
}
#first-next-line, #second-next-line, #third-next-line, #fourth-next-line{
  width: 80px;
  height: 40px;
  font-size: 16px;
  position: absolute;
  margin-top: 30px;
  margin-left: 10px;
  border: none;
  background-color: #ffc63f;
  color: #141c3a;
  letter-spacing: 1px;
  cursor: pointer;
}```

It should look like this…

Still trying to spot the problem. Is your screen zoom set to 100%?

No. 67% on that screenshot.  Brb with 100%

100%

image.png1366×768 140 KB


IDK if it matters but I am using Chromium browser on a 1366x768 laptop screen.

It may well be that your browser is giving inline-block more space between than other browsers. Try changing the width on piano to 310px and see if that helps. Tweak it up by a pixel at a time until it does.

Just curious, but does it change when you make the browser full screen?

Yep, that worked!  Thank you sir!
.piano{
  width: 319px;
  height: 210px;
  display: block;
  margin: 0 auto;
  background-color: #fd4d3f;
  margin-top: 30px;
}


image.png1366×768 124 KB


Set it to 50% on that but works at any zoom level.

image.png1366×768 123 KB


No it did not.  I was messing with that as well.

BTW, the same issue happened to me. When I changed the piano width to 319, the problem disappeared.

A post was split to a new topic: Why we dont call the function direct
"
35,Re-creating the Lodash library - _.invert(),Get Help - Java,"learn-iterators,general",6,62,"
Hey there everyone!
I’m at this project and I’m unable to grasp the solution for the invert method. I don’t get how the iterator for… in loop is swapping key: values without using the method .keys. It seems quite odd to me!
here’s the solution which I’ve found through trial and error:
  invert: function(obj){
    let invertedObject = {}
    for (key in obj.keys) {
      let originalValue = obj[key];
      invertedObject = {originalValue: key};
    }
    return invertedObject;
  }

and this is my code:
  invert: function(obj){
    let invertedObject = {}
    for (key in obj.keys) {
      let originalValue = obj[key];
      invertedObject[originalValue] = key;
    }
    return invertedObject;
  }

I do get now why the object should be in the format {originalValue, key}, but I don’t get how the key was accessed. Also, what if the key was a string and not sequential numbers? Does the word key in the for … in loop functions as a keyword to access the key? I thought using it would be the same as using the word k for example.
Thanks!

","

but I don’t get how the key was accessed

Through the for-loop iterator.  for (x in list) will iterate through every item in list. x being the place-holder of the cycled items in list for each loop.

what if the key was a string and not sequential numbers?

As long as it was an iterable object of strings, it would have cycled through the strings. If it’s just a string (sometimes useful), then you’d get the index number of each letter (different from python, where you just get the letters!).
for (i in 'string'){
	console.log(i);
}
//0
//1
//2
//3
//4
//5

for (i in 'string'){
	console.log('string'[i]);
}
//s
//t
//r
//i
//n
//g


Does the word key in the for … in loop functions as a keyword to access the key?

Yes, it can be any word in theory, but for readability it should reflect what’s being iterated. (i for item, el for element, etc). K would work.
 I just learned something interesting doing this… (since python is my main language) 

Haha! That’s nice!
But if I iterate through a key:value pair, wouldn’t it print the key:value pair? Or just the key? I’ve tested it out and it only prints the keys! That’s what I don’t get!
for (key in {key1: 'value1', key2:'value2'}){
	console.log(key);
}
//key1
//key2


Thanks Pita!

I’ve got to say that this exercise has been pretty awesome! Props to codecademy

Are you thinking about this?
let x = {key1: 'value1', key2:'value2'}

for (key in x){
	console.log(x[key]);
}

//value1
//value2


Well this was my solution:
     invert(obj) {
         let objKeys = Object.keys(obj);
         let newObj = {}
         for(let i = 0; i < objKeys.length; i ++) {
             let holding = obj[objKeys[i]];
             newObj[holding] = objKeys[i];            
         }
         return newObj;
    }

But then after playing around with that for in loop just above, managed to shrink it down to the following with the tests still passing. I need to keep refreshing myself on all of the different loops
invert(obj) {
        let newObj = {};
        for (key in obj) {
            newObj[obj[key]] = key;
        }
        return newObj;
    }

"
36,"What is the difference between ""document.getElementById"" and ""document.querySelector""?",Get Help - Java,general,4,39,"
From this lesson, what is the difference between document.getElementById() and document.querySelector()?
In the Hint section accompanying the exercise, the following lines of code was used as an example.
let paragraph = document.querySelector('p');
document.body.removeChild(paragraph);

However, I used the following lines of code in solving the exercise and it worked.
let todo = document.getElementById(""oaxaca"");
document.getElementById(""more-destinations"").removeChild(todo);

Can they be used interchangeably?
Same question is applicable for document.body.removeChild(paragraph); and document.getElementById(""more-destinations"").removeChild(todo);
Is there a difference between the both of them or can they be used interchangeably?
","
I believe that document.getElementById('idName') is only useful for referencing selectors by their id.
But, document.querySelector('selectorName')   can be used to reference elements by id or class. So, it has more flexibility.
With the second question, they are essentially the same since you are just defining the same path in two ways. If you know that the child ‘paragraph’ is located under the body node and not further down the tree,then the first example you gave works. If you aren’t sure where in the hierarchy that element exists, but you know it has an id=‘more-destinations’, then this gets you there quickly.




 board6993103169:

can be used to reference elements by id or class. So, it has more flexibility.


It is actually even more flexible than that!
document.querySelector() can be used with any valid CSS selector:
const a = document.querySelector(""div p.top:first-child:"")

This will select elements that are the first child of a <p class=""top""> that is nested inside a <div>

Wow!
Thanks for that. It could come in handy on more complex builds.
"
37,Better understanding higher order functions - helpful resources,Get Help - Java,,53,12804,"
Just some thoughts about this exercise - from



Medium – 26 Mar 14


Higher Order Functions – Functional JavaScript – Medium
Closures, function factories, common factory pattern functions
Reading time: 6 min read










Lullabot - Strategy, Design, Development – 3 May 17


Higher Order Functions in JavaScript
A gentle introduction to the topic of higher order functions and how you might use them in combining small functions together to build complex behavior.






These two articles help me to understand better the exercise
","
Many Many Thanks but you know still hard, it is so complicated.

So true. It’s like there was a huge leap in this exercise from Arrays to Loops. Now we’re in a Brave New World.
I’ve been rolling with the things I didn’t understand until now. Now I feel like I need to sit down and examine the elements in Javascript to understand the layout.

Instructions should be rewritten. HOF are complicated but they aren’t that abstract, they are enough for any human to understand. Problem is, the instructions.

I have to agree on this. I understand that functions can be passed as parameters, that’s not the difficulty. What I struggle to understand is how this kind of callback is useful when used. I’m supposed to learn an advanced concept but I have no clue what its purpose is. If that was clarified with simple examples I think it would then just be a matter of learning the syntax properly.

I’m no way near understanding this, but found this a really helpful read.



The Practical Dev



Higher-order functions in Javascript
A look at higher-order functions in Javascript






Totally agree, the instructions are very poorly written. It would help to understand what the objective actually is

I’m completely stuck on this lesson. The explanation is hard to understand. I’m trying to find the info on other resources but with no success yet. It would be great if your examples will relate to real life applications. Even though I somehow completed the lesson I feel that I didn’t grasp the concept in order to apply it in my future projects.

Was totally confused  by this lesson, I feel the instructions didn’t really explain what was going on, and by the time I got to instruction 2, it made absolutely 0 sense to me, in terms of what it as asking for.
When looking at the hint, I didn’t understand how I was supposed to figure past -
const checkConsistentOutput = (func, val) => {
Very difficult lesson to grasp.

Thank you for this, this article was a great help.

Thank you for the articles, they are definitely very helpful

I want to provide an article that helped me understand HOF better. Hopefully, it’d help you readers as well:
Understanding Higher-Order Functions in JavaScript[]

Totally agree with you, syntax and use are not that ■■■■, but at this level (absolute beginner) it’s hard to figure out when and where to use them…

const checkThatTwoPlusTwoEqualsFourAMillionTimes = () => {
for(let i = 1; i <= 1000000; i++) {
if ( (2 + 2) != 4) {
console.log('Something has gone very wrong  ');
}
}
};
const addTwo = num => num + 2;
const timeFuncRuntime = funcParameter => {
let t1 = Date.now();
funcParameter();
let t2 = Date.now();
return t2 - t1;
};
// Write your code below
let checkConsistentOutput=(func,val)=>{
let first=func(val)
let second=func(val)
if(first===second){
return first
}else{
return ‘This function returned inconsistent results’
}
}
checkConsistentOutput(addTwo,1)
console.log(checkConsistentOutput)
I am completely lost here. Can someone help to break this down…




 7367922719:

checkConsistentOutput(addTwo,1)


If you log this line, it will print the result.



 7367922719:

console.log(checkConsistentOutput)


That line is only logging [Function] or something similar. It is only a reference to the function, not an invocation of it, as with the above.

Sorry for the delay. I had the same problem. In the following link you can find a complete explanation for the problem with that exact code and its solution:
https://discuss.codecademy.com/t/higher-order-functions/395424
const checkThatTwoPlusTwoEqualsFourAMillionTimes = () => {
  for(let i = 1; i <= 1000000; i++) {
    if ( (2 + 2) != 4) {
      console.log('Something has gone very wrong :( ');
    }
  }
};

const addTwo = num => num + 2;

const timeFuncRuntime = funcParameter => {
  let t1 = Date.now();
  funcParameter();
  let t2 = Date.now();
  return t2 - t1;
};

// Write your code below

const time2p2 = timeFuncRuntime(checkThatTwoPlusTwoEqualsFourAMillionTimes);

const checkConsistentOutput = (func, val) => {
    let firstTry = func(val);
    let secondTry = func(val);
    if (firstTry === secondTry) {
        return firstTry
    } else {
        return 'This function returned inconsistent results'
    }
};

checkConsistentOutput(addTwo, 10);


Hi mft,
Hope is all well and a Happy New Year as we are almost there.
I am trying to understand the Higher Order Functions concept but I find myself extremely confused by the definitions.
The Introduction gives the following definition:
» Higher-order functions are functions that accept other functions as arguments and/or return functions as output.
I contrast to the definition from Functions as Parameters :
» A higher-order function is a function that either accepts functions as parameters, returns a function, or both.
In summary (according to above) HOFs are functions that can take other functions as arguments, parameters, and/or return functions as outputs, is the statement correct ?
Many thanks for your time in providing an answer.

The simple difference between argument and parameter is that one is a value or object reference, the other is a variable to refer to the argument by within the scope of the function.
function foo (parameter) {
    // code
}

foo(argument)    // function call (invoke with an argument)

I’d be inclined to focus on the first definition, without letting the second one alter the meaning, however similar or connected.
calc = (func, a, b) => func(a, b)

The above is a function that takes a function and two numeric arguments and returns the numbers as computed by the function.
console.log(calc((a, b) => a * b, 6, 7))    // 42

Give this a try and post again if we have not answered your question. This deserves a measure of discussion and a few more examples.

Hi;
I need a little basic explanation regarding to exercise 2 in 3/4.
This is what was written:
const checkConsistentOutput = (func, val) => {
let firstTry = func(val);
let secondTry = func(val);
if (firstTry === secondTry) {
return firstTry;
The question is, what is the “func”, how it turn to function?
and second question is;
in one of other teacher exercises he wrote:
var showName = function() {
var name = “FP JavaScript”
return function() {
console.log(name)
}
}()
showName() //==>> FP JavaScript
console.log(name) //==>> Reference Error
I mean the last two lines, when I use:
checkConsistentOutput();
to give me the result, all page get red lines of error. What is wrong?
More than solution I need the concept.
gratefully




 manchanperryman:

I’ve been rolling with the things I didn’t understand


LOL good luck understanding now
"
38,What are the advantages of function expressions?,Get Help - Java,,14,9575,"
So does someone have an example of why I’d ever want to use a function expression over a function declaration?
","
I’m a little confused as to the application for Function Expressions, at least in the way it’s being shown in the exercise and my current understanding.
At a glance it appears redundant to declare a variable to hold a function when a function can just be declared on it’s own. Is it maybe related to memory usage throughout a larger program?
I think an example of a practical use case would set me straight.
Insight would be appreciated.
Thanks!

This is an article from 2015, before arrow functions were adopted into regular use, but it can apply to them, as well, for the most part.

Quick Tip: Function Expressions vs Function Declarations
Conslusion
As we’ve seen, function expressions don’t offer much that can’t be achieved with function declarations, but using them can often result in cleaner and more readable code. Their widespread use makes them an essential part of every developer’s toolbox.


you can see here :



MDN Web Docs



Grammar and types
This chapter discusses JavaScript's basic grammar, variable declarations, data types and literals.






at the part called function hoisting.
Then at this part of lesson from codecademy
https://www.codecademy.com/courses/introduction-to-javascript/lessons/functions/exercises/function-expressions?action=resume_content_item
it said :

Unlike function declarations, function expressions are not hoisted so they cannot be called before they are defined.

for me that is the advantage from function expressions.

You can also assign an anonymous function to be the value of a variable, for example:
const myGreeting = function() {
  alert('hello');
}

This function could now be invoked using:
myGreeting();

This effectively gives the function a name; you can also assign the function to be the value of multiple variables, for example:
let anotherGreeting = myGreeting;

This function could now be invoked using either of:
myGreeting();
anotherGreeting();

But this would just be confusing, so don’t do it! When creating functions, it is better to just stick to this form:
function myGreeting() {
  alert('hello');
}

You will mainly use anonymous functions to just run a load of code in response to an event firing — like a button being clicked — using an event handler. Again, this looks something like this:
myButton.onclick = function() {
  alert('hello');
  // I can put as much code
  // inside here as I want
}




MDN Web Docs



Functions — reusable blocks of code
Another essential concept in coding is functions, which allow you to store a piece of code that does a single task inside a defined block, and then call that code whenever you need it using a single short command — rather than having to type out the...






In advanced programming, you might want to write functions that take in other functions as arguments. For example, you might want a function applyTwice(f, x) which applies the function f on x twice. If you want to call this function, you probably need a function expression for the first argument.

Well i guess it removes the need of using the variable in front of it like instead of function water(amount){}; it instead changes to const water = function(amount) thereby removing the water in front of the amount but its pretty useless

Notwithstanding what hoisting offers, there is no defense for a declared function. It can be deleted. I see no advantage in this respect to using function declarations, at all.
Know how functions work and go from there. Production settings are always going to dictate. const is the way to protect assigned function expressions.
const foo = x => x ** 2

I don’t really see the point of function expressions I’ll learn about them and just move on and probably never use them. 
I thought maybe you could assign a value to a variable at runtime and then refer to that later on, but that doesn’t seem possible at first observation.
For example in Scala, you could write:
val fruit = dayOfWeek match {
  case 'Monday' => 'Apple'
  case 'Tuesday' => 'Pear'
}

Which pending on the value of dayOfWeek would define what the variable fruit is. Is something like this possible in JS? I’m just trying to see the benefits of function expressions. They just seem to have replaced the keyword function with const
Can arrow functions be used with standard functions or only with function expressions?




 munroe4985:

They just seem to have replaced the keyword function with const


Not so. const and let are declaration keywords that redefine var to a tighter scope reference. The function keyword is not replaced.
const fruit = function (day) {
  switch (day) {
  case 'Monday': return 'Apple';
  case 'Tuesday': return 'Pear';
  // ...
  default: return 'Error'
  }
}
console.log(fruit('Tuesday'))    // Pear

Arrow functions have replaced the function keyword with a fat arrow. It is also written after the parameter list instead of before.
const fruit = (day) => {
  switch (day) {
    case 'Monday': return 'Apple';
    case 'Tuesday': return 'Pear';
    // ...
    default: return 'Error'
  }
}




 munroe4985:

I don’t really see the point of function expressions I’ll learn about them and just move on and probably never use them.


At the very heart of programming are functions. There is no getting around them, and it is not possible to, ‘just move on.’
The function declaration is the most fundamental, but it has a weakness. It can be deleted or replaced.
function foo (param) {
    // code
    return value
}

A function expression can take two forms. The ES5 form,
var foo = function (param) {
    // code
    return value
}

and the new ES6 form,
const foo = (param) => {
    // code
    return value
}

The above ES5 form is just as vulnerable as the declaration form. We can now protect it the same as the above arrow function, with const.
const foo = function (param) {
    // code
    return value
}

We can still use this form of function expression as a constructor, which will come up later in the course. It has all the properties of a declared function so is not very different at all, save that we can now protect it.
Arrow functions for all their simplicity have those properties stripped away. They have no arguments object, no this property and cannot be used as constructors. But, they also have relaxed syntax rules for simple, pure functions with a single parameter and single return expression…
const foo = param => expression;

At any length, you will never escape the need for or use of functions in whatever form. Without them expect your code to be very spaghettified, difficult to debug, error prone and repetitive. Don’t move forward until you are comfortable with and understand how to write and use functions.

so instead of adding variables each time after declaring the function ,we can merge them in one declaration? is this the use of function expression?

It’s called an expression because it can be assigned the same as any value. The function is anonymous (has no name) but we can invoke it with the variable name we assigned it to.
x => x ** 2

As it stands we cannot execute the above expression. However if we assign it to a variable,
y = x => x ** 2

then we can give a value for x and it will return the square of that value.
console.log(y(5))    //  25

What’s more, we can pass that function expression to another function, but that will come up later in the course so I won’t go there now.
Now that y is defined as a function we can invoke it as long as it is in memory.
console.log(y(6))    //  36

console.log(y(13))   //  169




 munroe4985:

I don’t really see the point of function expressions I’ll learn about them and just move on and probably never use them.


After saying the above myself, that’s all I use now 
I figured I might as well learn how to do things the current way and just stick with that and arrow functions are handy.
The only confusion I get from time to time is that the const keyword is used for so many things, from a function to an object and a variable.




 munroe4985:

The only confusion I get from time to time is that the const keyword is used for so many things


Bottom line, scoping is the most sure-fired way to protect global scope from being polluted, and keep variable nestled away and out of the foray. Whether we use var, let or const depends on where we want the scope to apply, and whether we want variables to be protected or not.
const seems to be used a lot. It tells readers that this variable is constant, and only ever has one value. If we want to be able to change that value at some point, then use let for block scope or var for function scope.
"
39,How does `.reduce()` actually work?,Get Help - Java,,34,4449,"
Okay, as this is a solution to the exercise, I’m going to spoiler blur it.
I get what the reduce() method (method is right, right?) is doing.  But, why is the function executing without being called?
I.E. the console logs are happening without me having to call newSum();
I don’t even have to ask for newSum to be console logged.  #dahell? lol!

const newNumbers = [1, 3, 5, 7];

const newSum = newNumbers.reduce((accumulator, currentValue) => {
 
  console.log('The value of accumulator: ', accumulator);
console.log('The value of currentValue: ', currentValue);
  return (accumulator + currentValue);
  
}, 10 // Second argument of reduce, sets accumulator to start at 10.);


","
Looks like you discovered some weirdness with the error handling of JS. This code (as shown) should not run. Are we missing some of the code?
One expects you will remove the debugging logs after this.

it is being called. are you sure you know what reduce does? be careful with assumptions so that you don’t rule out answers
Your function is just ADD, same as the + operator. Some other language might write the same thing like this instead:
(reduce + [1 3 5 7])

or
reduce (+) [1, 3, 5, 7]

or
reduce(add,  [1, 3, 5, 7])

It’s a bit easier to see what’s going on without all the boilerplate you’ve got in there.
javascript doesn’t necessarily have to be worse than the above examples:
let add = (a, b) => a + b

[1, 3, 5, 7].reduce(add)

I got this exercise but only becuase the pattern is exactly the same as all the iteratir ones that came before it. I have no idea what’s happening, why it’s happening, how it’s working.
const newNumbers = [1, 3, 5, 7];
const newSum = newNumbers.reduce((accumulator, currentValue) => {
console.log('The value of accumulator: ', accumulator);
console.log('The value of currentValue: ', currentValue);
return accumulator + currentValue;
});
console.log(newSum);

It works because the method keeps a running total (the accumulator) as it iterates over the array, one value at a time.
total = 0
for (x of newNumbers) {
    total += x;
}
return total

Think of it like this…
Array.reduce((total, x) => total + x)

The second value is the iterator variable, the first is the running total.
We can if we wish write a separate function and use it as a callback for reduce…
const plus = (s, x) => s + x;
array =  [2, 3, 5, 7, 11, 13, 17, 19]
array.reduce(plus)
// 77

I’m just getting error codes after completing the assignment.
The value of the accumulator: 1
The value of currentValue:  3
The value of the accumulator: 4
The value of currentValue:  5
The value of the accumulator: 9
The value of currentValue:  7
/home/ccuser/workspace/javascript-iterators-reduce/main.js:12
console.log(newSum.reduce(newNumbers));
                   ^

TypeError: newSum.reduce is not a function
    at Object.<anonymous> (/home/ccuser/workspace/javascript-iterators-reduce/main.js:12:20)
    at Module._compile (module.js:571:32)
    at Object.Module._extensions..js (module.js:580:10)
    at Module.load (module.js:488:32)
    at tryModuleLoad (module.js:447:12)
    at Function.Module._load (module.js:439:3)
    at Module.runMain (module.js:605:10)
    at run (bootstrap_node.js:427:7)
    at startup (bootstrap_node.js:151:9)
    at bootstrap_node.js:542:3

and here’s the code
const newNumbers = [1, 3, 5, 7];

const newSum = newNumbers.reduce(
  (accumulator, currentValue) => {
  
    console.log('The value of the accumulator:', accumulator);
    console.log('The value of currentValue: ', currentValue);
    
    return accumulator + currentValue;
} );

console.log(newSum.reduce(newNumbers));







 krtong:

console.log(newSum.reduce(newNumbers));


As the error message states, newSum.reduce is not a function. What that means is that a number does not have a an attribute, reduce, only  list object have that method. Try,
console.log(newSum)

Do I have to use accumulator as the first variable? i.e,
Does
const newSum = newNumbers.reduce((x, y) => {
  console.log('The value of x: ', x);
  console.log('The value of y: ', y);
  return x + y;
}, 10);

work as well?




 marioduoduo:

Do I have to use accumulator as the first variable?


No, we can use any variable we like, as you will have seen from the above.
 Array.reduce((a, b)) => a + b)

const newNumbers = [1, 3, 5, 7];

const newSum = newNumbers.reduce((accumulator, currentValue) => {
  console.log('The value of accumulator: ', accumulator);
  console.log('The value of currentValue: ', currentValue);
  return accumulator + currentValue;
}, 10);

console.log(newSum);

I do not understand how the arguments are being handled. Why, without an argument after the function, does accumulator take the first element of the array for value while currentValue waits for the iteration, but when adding an argument after the function then suddenly accumulator takes the value of that argument while currentValue takes the first element of the array straight away?
There must be a logic behind this, but I don’t get it. Would appreciate if someone could help me understand or direct me to a resource that explains this behavior in more details.

Imagine you are going to add up the value of a small bag of coins. First you reach into the bag with both hands, and retrieve 1 coin in each hand. We’ll make your left hand the accumulator and your right hand the currentValue. First you look at the coin in your left hand accumulator, and note its value, then you place the coin currently in your right hand currentValue into your left hand accumulator with the coin that’s already there, and add its value to the previous total. Now your left hand accumulator has 2 coins, and your right hand is empty. You reach back into the bag with only your right hand currentValue to get the next coin. Then you move the coin to you left hand accumulator adding it’s value to the previous total. Now your left hand accumulator has 3 coins, and your right hand currentValue is once again empty. You repeat this process until you’ve accumulated all of the coins into your left hand accumulator, and you know the total value of the coins that were in the bag. It’s important to note that the reduce() method does not change the original array, so at the end of my analogy, the coins would be paced back in the bag. Also, reduce() isn’t limited to addition.
Consider this very simple example, and its results:
const myArray = [2, 2, 2, 2];
console.log(myArray.reduce((a,b) => a + b));
console.log(myArray.reduce((a,b) => a - b));
console.log(myArray.reduce((a,b) => a * b));
console.log(myArray.reduce((a,b) => a / b));

Output:

8
-4
16
0.25

Hope this helps.

for all “visuals” of const newNumbers = [1, 3, 5, 7];


late answer:
sometimes the accumulator has a shape like the array elements (like when reducing with add to get the sum, the accumulator is then a number just like the array elements. For this case the first value in the array is fine as the initial accumulator.
but the accumulator might be something else entirely, so you’d need to specify the initial value, for example: the array might contain strings, and the accumulator might be counts of how many times each letter has been seen

Maybe I just missed reading something but i still dont understand why the second argument of reduce sets accumulator to 10 when its the first parameter. Why doesnt it set currentValue?

isn’t that the same thing

This is what reduce does:
function reduce(arr, f, acc) {
  for (let e of arr) {
    acc = f(acc, e)
  }
  return acc
}


can you explain this example in detail because it looks ambiguous for me ?!!

I don’t understand why the codes in the newSum assignment is displaying the result in the console even when the function has not been called.
The below code is not meant to show on the console because the function was not called.
 console.log('The value of accumulator: ', accumulator);
 console.log('The value of currentValue: ', currentValue);
Am I missing something?

We’ll need to see the complete code to reach a conclusion.

Below is the full code, yet it shows the result on the console without the function being called
const newNumbers = [1, 3, 5, 7];

const newSum = newNumbers.reduce((accumulator, currentValue) => {
  console.log('The value of accumulator: ', accumulator);
  
  console.log('The value of currentValue: ', currentValue);
  
  return accumulator + currentValue;
  
});

"
40,Chore door game,Get Help - Java,"functions,general",3,82,"
Hi,  I am doin Chore Door project in Javascript Section. https://www.codecademy.com/courses/build-interactive-websites/projects/chore-door
I did every step exactly how it’s writen , but I cannot reset the game after playing 1 time.
My code
<div class=""header"">
    <img src=""https://s3.amazonaws.com/codecademy-content/projects/chore-door/images/logo.svg"">
    <div class=""title-row"">
      <img class=""star"" src=""https://s3.amazonaws.com/codecademy-content/projects/chore-door/images/star.svg"">
      <p class=""instructions-title"">Instructions</p>
      <img class=""star"" src=""https://s3.amazonaws.com/codecademy-content/projects/chore-door/images/star.svg"">
    </div>
    <table class=""instructions-row"">
      <tr>
        <td class=""instructions-number"">1</td>
        <td class=""instructions-text"">Hiding behind one of these doors is the ChoreBot.</td>
      </tr>

      <tr>
        <td class=""instructions-number"">2</td>
        <td class=""instructions-text"">Your mission is to open all of the doors without running into the ChoreBot.</td>
      </tr>
      <tr>
        <td class=""instructions-number"">3</td>
        <td class=""instructions-text"">If you manage to avoid the ChoreBot until you open the very last door, you win!
        </td>
      </tr>
      <tr>
        <td class=""instructions-number"">4</td>
        <td class=""instructions-text"">See if you can score a winning streak!</td>
      </tr>
    </table>
  </div>
  <div class=""door-row"">
    <img id=""door1"" class=""door-frame""
      src=""https://s3.amazonaws.com/codecademy-content/projects/chore-door/images/closed_door.svg"">
    <img id=""door2"" class=""door-frame""
      src=""https://s3.amazonaws.com/codecademy-content/projects/chore-door/images/closed_door.svg"">
    <img id=""door3"" class=""door-frame""
      src=""https://s3.amazonaws.com/codecademy-content/projects/chore-door/images/closed_door.svg"">
  </div>
  <div id=""start"" class=""start-row"">
    Good Luck!
  </div>
  <script type=""text/javascript"" src=""script.js"">
  </script>

let doorImage1 = document.querySelector(""#door1"");
let doorImage2 = document.querySelector(""#door2"");
let doorImage3 = document.querySelector(""#door3"");
let startButton = document.querySelector(""#start"");

let botDoorPath = ""https://s3.amazonaws.com/codecademy-content/projects/chore-door/images/robot.svg"";
let beachDoorPath = ""https://s3.amazonaws.com/codecademy-content/projects/chore-door/images/beach.svg"";
let spaceDoorPath = ""https://s3.amazonaws.com/codecademy-content/projects/chore-door/images/space.svg"";
let closedDoorPath = ""https://s3.amazonaws.com/codecademy-content/projects/chore-door/images/closed_door.svg"";

let numClosedDoors = 3;
let openDoor1;
let openDoor2;
let openDoor3;
let currentPlaying = true;

const isBot = (door) => {
  if (door.src === botDoorPath) {
    return true;
  } else {
    return false;
  }
}

const isClicked = (door) => {
  if (door.src === closedDoorPath) {
    return false;
  } else {
    return true;
  }
}

const playDoor = (door) => {
  numClosedDoors--;
  if (numClosedDoors === 0) {
    gameOver(""win"");
  } else if (isBot(door)) {
    gameOver();
  }
};

const randomChoreDoorGenerator = () => {
  var choreDoor = Math.floor(Math.random() * numClosedDoors);
  if (choreDoor === 0) {
    openDoor1 = botDoorPath;
    openDoor2 = beachDoorPath;
    openDoor3 = spaceDoorPath;
  } else if (choreDoor === 1) {
    openDoor2 = botDoorPath;
    openDoor1 = beachDoorPath;
    openDoor3 = spaceDoorPath;
  } else {
    openDoor3 = botDoorPath;
    openDoor1 = beachDoorPath;
    openDoor2 = spaceDoorPath;
  }
};

doorImage1.onclick = () => {
  if (!isClicked(doorImage1) && currentPlaying) {
    doorImage1.src = openDoor1;
    playDoor(doorImage1);
  }
};

doorImage2.onclick = () => {
  if (!isClicked(doorImage2) && currentPlaying) {
    doorImage2.src = openDoor2;
    playDoor(doorImage2);
  }
};

doorImage3.onclick = () => {
  if (!isClicked(doorImage3) && currentPlaying) {
    doorImage3.src = openDoor3;
    playDoor(doorImage3);
  }
};

startButton.onclick = () => {
  if (!currentlyPlaying) {
    startRound();
  }
};

const gameOver = (status) => {
  if (status === ""win"") {
    startButton.innerHTML = ""You win! Play again?"";
  } else {
    startButton.innerHTML = ""Game over! Play again?""
  }
  currentPlaying = false;
};


const startRound = () => {
  doorImage1.src = closedDoorPath;
  doorImage2.src = closedDoorPath;
  doorImage3.src = closedDoorPath;
  numClosedDoors = 3;
  startButton.innerHTML = ""Good Luck!"";
  currentlyPlaying = true;
  randomChoreDoorGenerator();
};


startRound();


","
Hello, @hulyakarakaya, and welcome to the forums.
What does one do to play another round? What code is executed when that event occurs? Follow the code with your finger, and execute each step carefully. Make sure you read exactly what the code says, and not what you presume that it says because you’ve already read it many times over.

A post was split to a new topic: Chore Door Feedback
"
41,Lodash - .pad(),Get Help - Java,"learn-loops,general",6,104,"
Hi!
I’m recreating the lodash library in this project: Lodash library.
I’m dealing with the .pad() method, wondering which is the most efficient way to solve it.
Here are my solutions:
-Using a while loop:
    pad(string, length) {
        while(string.length < length) {
            string = string + ' ';
            if(string.length < length) string = ' ' + string;
        }
        return string;
    }

-using .repeat()
    pad(string, length) {
      let adjustment = 0;
      let padding = length - string.length;
      if(padding%2 === 1) {
          padding --;
          adjustment ++;
        }
      string = ' '.repeat(padding/2) + string + ' '.repeat(padding/2) + ' '.repeat(adjustment);
        return string;
    }

I prefer the solution with the while loop, since the code is more concise, but i’m wondering if .repeat() could be faster to execute.
Thank you in advance!
","
Greetings,
If I had a choice then, I (being a learner) will choose the one with while() loop due to better readability.
Also, to further decrease the execution time of the while() loop, I would preferably store the length of the string in a variable.
let strLength = string.length;
for(let i = 0; i < strLength; i++){/*DESIRED OPERATION*/}

Now, length of the string has been calculated just once whereas, in the example you have attached, the string length is being evaluated with each iteration.
Also, I am pretty sure that there are many more optimization tricks (E.g. : Reverse iteration)and I think, it would be a good exercise if we both look it up on our own.
Thanks
@snikhill

Hi snikhill
Thanks for your tip about string.length! I’ll write loops in that way in future!
So you would choose the while loop only for readabilty? Do you know how .repeat() works? It iterates the string addition or it is a single operation?
ty

Interesting solution - this noob is impressed.
I’m curious, did you test it, and if so, did it pass?

Just an observation, but the while loop needs to check the new length of the string with each iteration, otherwise, you’d have an infinite loop.
The solution using repeat is far less work for the computer than adding a single unit of padding to the end, and possibly the beginning of the string repeatedly.

I went with the while loop too:
    pad(text, length) {
        if (text.length >= length) return text;
        while (text.length < length) {
            text = `${text} `
            if (text.length < length) text = ` ${text}`;
        }
        return text;
    },

Personally it looks easier to read/understand.
In terms of speed, it doesn’t seem to make any or very little difference.
So I padded with a length of 10,000 and execution time was 0.066 seconds. Assigning the length to a variable then using that in the while loop, execution time was 0.065 seconds.
A length of 50,000 was 0.071 seconds with the length variable and 0.072 seconds without, however the .repeat() solution was 0.064 seconds so a bit faster.
"
42,Re-creating the Lodash Library,Get Help - Java,general,5,74,"
Hi,
I am  re-creating the Lodash Library.
https://www.codecademy.com/paths/web-development/tracks/web-dev-js-arrays-loops-objects/modules/pjs-javascript-capstone/projects/lodash
But now I’m stuck at step 9 Implement inRange().
If I type
if(start > end){
      var temp = end

Al the curly brackets turn red. And (because of that) I can’t test InRange() at step 10.
I tried this course on my own computer in VS Code, But the terminal doesn’t seem to work.
What am I doing wrong?
image432×526 8.12 KB
","
Try ending you statements with ;. Just a guess though 

Thanks! That is better, but the test is failing. In the get help video the webdeveloper is leaving the ; out. 
image1918×962 143 KB

hi!
i’m having trouble in the inRange tests too! I even tried to copy the exact same code from the get help video and it still fails the test 
here is my code:

and, i dont get it, it still fails in almost all tests!

I just copied the code you wrote and everything passes.
inRange(number, start, end) {
        if (end === undefined) {
            end = start;
            start = 0;
        }
        if (start > end) {
            let transfer = end;
            end = start;
            start = transfer;
        }
        let isInRange = start <= number && number < end;
        return isInRange
    }

Which tests are failing?
"
43,Re-creating the Lodash Library Question,Get Help - Java,general,6,114,"
https://www.codecademy.com/paths/web-development/tracks/web-dev-js-arrays-loops-objects/modules/pjs-javascript-capstone/projects/lodash
I’ve read the instructions for this project multiple times, and don’t understand what the objective is. I started to watch the solution video, and it looks like I am supposed to take these lodash methods and re-create the functionality that is used to create them. I don’t want to watch the entire video, because I’d like to try to solve it on my own.
One major point of confusion for me is the word “implement” is used over and over. I’m a native English speaker and the word implements means “to put something to use”, which would mean I need to use these methods somewhere. For example:
“3. Implement  our game plan” makes sense.
“4. Ideate : There are a number of different ways to implement this method.” doesn’t make sense to me because we are given no instructions for where to implement the method.
Maybe it’s just me because others seem to have understood without issue. Can someone please explain what I’m supposed to actually do in this project?
","

In computer science, an implementation is a realization of a technical specification or algorithm as a program, software component, or other computer system through computer programming and deployment. Many  implementations may exist for a given specification or standard.

Implementation - Wikipedia

You’re responsible for the implementation of the lodash methods: Given the expected result of each function and/or how they should accomplish said result (“a technical specification or algorithm”), you are required to programmatically achieve whatever it is each method is designed to achieve.
As @mtf said in his response to a similar question last year:




Lodash project Projects


    Okay. We are given an opportunity to write this method from scratch without having referred to the actual module. It’s an exercise in ideation, design and implementation; practice that we do well to take a hand in. Dive in and try to create your method (as soon as you blot out the actual one from your memory).
  


Assume there is no existing implementation for each of these functions: You are the programmer; program!

Thank you for the Wikipedia link, and the link to the earlier comment by @mtf. I understand now.

Yes, I was having the same confusion. So when we are told what .clamp() does, we just have to create our own function that achieves the same thing?

The Lodash Documentation explains the clamp method (and all other methods).

Yep exactly that. As @825orion said, assume there is no existing implementation already. I was slightly confused at first due to the wording used:

Use Math.max() to clamp the number by the lower bound. The return value of Math.max() called with the number and the lower bound will be the larger of the two values, meaning it will be clamped by the lower bound.

It’s like trying to describe a word but using the word you’re describing in the definition
"
44,Math.random,Get Help - Java,"general,intro-to-jsx",3,25,"
Hi !
I don’t clearly understand Math.random() : what’s the point of having a method that returns any other number each time you log it in ? What’ s the use for it ?
Thanks for your answer and take care.
","
generating a random number is so useful. For example, there is RPS (rock paper scissor) project here on codecademy. Use random() (and some math) to generate a random computer choice.
In general, you will see that random number can useful to mimic random things like a coin flip.

Aaaaah ! Thanks ! 
"
45,Not allowing different formats,Get Help - Java,general,3,25,"
let satellite = 'The Moon';

let galaxy = 'The Milky Way'

let stars = 'North Star'

function callMyNightSky() {

  return `nightsky ${satellite},${stars}, and ${galaxy}`;

}

console.log (callMyNightSky())

this format didn’t work  but i think it has the same result is there a reason it wants the code a specific way
https://www.codecademy.com/courses/introduction-to-javascript/lessons/scope/exercises/global-scope
the approved format that worked for me
let satellite = 'The Moon';

let galaxy = 'The Milky Way'

let stars = 'North Star'

function callMyNightSky() {

 return 'Night Sky: ' + satellite + ', ' + stars + ', and ' + galaxy;

}

console.log (callMyNightSky())

","
You might try changing nightsky to Night Sky: . While it is possible that the SCT for the exercise is expecting you to use concatenation rather than interpolation, it’s more likely that your code isn’t accepted because the output doesn’t match what is expected. Looks like you’re missing a space as well.



 digital4332584610:

${satellite},${stars}



ya i went back and fixed all the missing spaces and it worked. 
"
46,Nested Loop Lesson 6,Get Help - Java,learn-loops,3,54,"
I can’t find any problem with my code. Can you? Please help!
// Write your code below
const bobsFollowers = ['Frank', 'John', 'Suzie', 'Bob'];
const tinasFollowers = ['Jackie', 'Bob', 'Suzie'];
const mutualFollowers = [];

for(let i = 0; i < bobsFollowers.length; i++) {
  for (let j = 0; j < tinasFollowers; j++) {
    if (bobsfollowers[i] === tinasFollowers[j]) {
      mutualFollowers.push(bobsFollowers[i]);
    }
  }
};

console.log(mutualFollowers);

Nested Loop
","



 bdarabzand:

for (let j = 0; j < tinasFollowers; j++) {


Small mistake, easy to glaze over when staring at code for a while! it should be tinasFollowers.length, that should solve your issue.

Thanks for your help
"
47,Stuck on Chore Door project,Get Help - Java,general,8,50,"
Hi,
I was working on the Chore Door assignment (https://www.codecademy.com/paths/web-development/tracks/build-interactive-websites/modules/web-dev-interactive-websites/projects/chore-door) and got completely stuck somewhere after task 37. Watching the added video three times hasn’t helped (besides that the instructor in that video copy pastes the hints a lot) and customer support won’t/can’t give me the javascript code so I can check where I went wrong.
Does someone have the proper JS code for Chore Door project for me so can I find my error and move on?
Cheers,
Jaap
","
Hey there!
It’s not really policy in the forum to share answer code but we can definitely try and help you find your problem. (And error detection is a huge part of these projects, so it’s part of the learning process).
Just share your code (remember to format with </>) and any relevant error messages or unexpected results.

Thanks toastedpitabread, I’m used to a commercial application like Codecademy actually offering the answers to assignments (not an official test, just a homework assignment). But if you can help me out that would be great.
The fault in my code should be in the javascript below somewhere, as the HTML and CSS code was made earlier and worked properly.
let doorImage1 = document.getElementById(‘door1’);
let doorImage2 = document.getElementById(‘door2’);
let doorImage3 = document.getElementById(‘door3’);
let startButton = document.getElementById(‘start’);
const botDoorPath = “https://s3.amazonaws.com/codecademy-content/projects/chore-door/images/robot.svg”;
const beachDoorPath = “https://s3.amazonaws.com/codecademy-content/projects/chore-door/images/beach.svg”;
const spaceDoorPath = “https://s3.amazonaws.com/codecademy-content/projects/chore-door/images/space.svg”;
let numClosedDoors = 3;
let openDoor1;
let openDoor2;
let openDoor3;
let closedDoorPath = ""https://s3.amazonaws.com/codecademy-content/projects/chore-door/images/closed_door.svg”;
const isClicked = (door) => {
if (door.src === closedDoorPath) {
return false;
} else {
return true;
}
}
const playDoor = () = {
numClosedDoors–;
if (numClosedDoors === 0) {
gameOver(‘win’);
}
}
const randomChoreDoorGenerator = () => {
const choreDoor = Math.floor(Math.random() * numClosedDoors);
if (choreDoor === 0) {
openDoor1 = botDoorPath;
openDoor2 = beachDoorPath;
openDoor3 = spaceDoorPath;
} else if (choreDoor === 1) {
openDoor2 = botDoorPath;
openDoor3 = beachDoorPath;
openDoor1 = spaceDoorPath;
} else { (choreDoor === 2)
openDoor3 = botDoorPath;
openDoor1 = beachDoorPath;
openDoor2 = spaceDoorPath;
}
}
door1.onclick = () => {
if (!isClicked(doorImage1)) {
doorImage1.src = openDoor1;
playDoor();
}
}
door2.onclick = () => {
if (!isClicked(doorImage2)) {
doorImage2.src = openDoor2;
playDoor();
}
}
door3.onclick = () => {
if (!isClicked(doorImage3)) {
doorImage3.src = openDoor3;
playDoor();
}
}
const gameOver = (status) => {
if (status === ‘win’) {
startButton.innerHTML = ‘You win! Play again?’;
}
}
randomChoreDoorGenerator();

There are many syntax errors in this program; missing semicolons, improperly placed conditionals, improperly defined functions.
Resolve those first, then you can re-examine function.

Hey thanks 825orion, I’ve checked and used the project walkthrough as an example. I noticed the instructor there did some things different (and I understand some rules have relaxed with recent js versions) but her code - without the semicolons etc - worked in the project walkthrough.

I attempted to run your code and was unable to do so because of the syntax errors… maybe a version differential.  I’ve resolved the errors on my end, and it looks like this:
let doorImage1 = document.getElementById('door1');
let doorImage2 = document.getElementById('door2');
let doorImage3 = document.getElementById('door3');
let startButton = document.getElementById('start');
const botDoorPath = ""https://s3.amazonaws.com/codecademy-content/projects/chore-door/images/robot.svg"";
const beachDoorPath = ""https://s3.amazonaws.com/codecademy-content/projects/chore-door/images/beach.svg"";
const spaceDoorPath = ""https://s3.amazonaws.com/codecademy-content/projects/chore-door/images/space.svg"";
let numClosedDoors = 3;
let openDoor1;
let openDoor2;
let openDoor3;
let closedDoorPath = ""https://s3.amazonaws.com/codecademy-content/projects/chore-door/images/closed_door.svg"";

const isClicked = (door) => {
    if (door.src === closedDoorPath) {
        return false;
    } else {
        return true;
    }
};

const playDoor = () => {
    numClosedDoors--;
    if (numClosedDoors === 0) {
        gameOver('win');
    }
};

const randomChoreDoorGenerator = () => {
    const choreDoor = Math.floor(Math.random() * numClosedDoors);
    if (choreDoor === 0) {
        openDoor1 = botDoorPath;
        openDoor2 = beachDoorPath;
        openDoor3 = spaceDoorPath;
    } else if (choreDoor === 1) {
        openDoor2 = botDoorPath;
        openDoor3 = beachDoorPath;
        openDoor1 = spaceDoorPath;
    } else if (choreDoor === 2){
        openDoor3 = botDoorPath;
        openDoor1 = beachDoorPath;
        openDoor2 = spaceDoorPath;
    }
};

door1.onclick = () => {
    if (!isClicked(doorImage1)) {
        doorImage1.src = openDoor1;
        playDoor();
    }
};
door2.onclick = () => {
    if (!isClicked(doorImage2)) {
        doorImage2.src = openDoor2;
        playDoor();
    }
};
door3.onclick = () => {
    if (!isClicked(doorImage3)) {
        doorImage3.src = openDoor3;
        playDoor();
    }
};

const gameOver = (status) => {
    if (status === 'win') {
        startButton.innerHTML = 'You win! Play again?';
    }
};

randomChoreDoorGenerator();


At this point, I encounter errors where you define functionality for a click on each door: You do not define door1, door2, or door3.  Are these typos that are meant to be other variables?
I suspect you mean the doorImage variables instead (as they reference the HTML image elements).
After this point, you’ll need to attach the HTML (and preferably the CSS) code you’re using; otherwise there are no elements for the code to reference, and we’ll be unable to help you debug.

Be sure when sharing here to format the code with the </> before you paste also, it will make a huge difference in people being able to read it and help 




 825orion:

let doorImage1 = document.getElementById('door1');
let doorImage2 = document.getElementById('door2');
let doorImage3 = document.getElementById('door3');
let startButton = document.getElementById('start');
const botDoorPath = ""https://s3.amazonaws.com/codecademy-content/projects/chore-door/images/robot.svg"";
const beachDoorPath = ""https://s3.amazonaws.com/codecademy-content/projects/chore-door/images/beach.svg"";
const spaceDoorPath = ""https://s3.amazonaws.com/codecademy-content/projects/chore-door/images/space.svg"";
let numClosedDoors = 3;
let openDoor1;
let openDoor2;
let openDoor3;
let closedDoorPath = ""https://s3.amazonaws.com/codecademy-content/projects/chore-door/images/closed_door.svg"";

const isClicked = (door) => {
    if (door.src === closedDoorPath) {
        return false;
    } else {
        return true;
    }
};

const playDoor = () => {
    numClosedDoors--;
    if (numClosedDoors === 0) {
        gameOver('win');
    }
};

const randomChoreDoorGenerator = () => {
    const choreDoor = Math.floor(Math.random() * numClosedDoors);
    if (choreDoor === 0) {
        openDoor1 = botDoorPath;
        openDoor2 = beachDoorPath;
        openDoor3 = spaceDoorPath;
    } else if (choreDoor === 1) {
        openDoor2 = botDoorPath;
        openDoor3 = beachDoorPath;
        openDoor1 = spaceDoorPath;
    } else if (choreDoor === 2){
        openDoor3 = botDoorPath;
        openDoor1 = beachDoorPath;
        openDoor2 = spaceDoorPath;
    }
};

door1.onclick = () => {
    if (!isClicked(doorImage1)) {
        doorImage1.src = openDoor1;
        playDoor();
    }
};
door2.onclick = () => {
    if (!isClicked(doorImage2)) {
        doorImage2.src = openDoor2;
        playDoor();
    }
};
door3.onclick = () => {
    if (!isClicked(doorImage3)) {
        doorImage3.src = openDoor3;
        playDoor();
    }
};

const gameOver = (status) => {
    if (status === 'win') {
        startButton.innerHTML = 'You win! Play again?';
    }
};

randomChoreDoorGenerator();



Thanks 825orion, your code works and helped me find a few few typos in my code. It doesn’t do what it’s supposed to do however. I’m gonna ask customer support for the proper code from the CodeCademy (they should have it), and meanwhile continue with next chapters. I want to find my mistakes, but looking for them has taken me hours already and it’s losing it’s point by now.
Thanks again, Jaap
"
48,Await Promise.all() - whats wrong with my code?,Get Help - Java,"async-await,general",1,23,"
This gives me an error, why this approach is not accepted?
let {cookBeans, steamBroccoli, cookRice, bakeChicken} = require('./library.js')

// Write your code below:
async function serveDinnerAgain() {
  const foodArray = await Promise.all([steamBroccoli(), cookRice(), bakeChicken(), cookBeans()]);

  console.log(`Dinner is served. We’re having ${foodArray[0]}, ${foodArray[1]}, ${foodArray[2]}, and ${foodArray[3]}.`);
}

",
49,findKey() on Re-creating the Lodash Library,Get Help - Java,,10,614,"
Hi, I’m doing the project on Re-creating Lodash Library.
Now, I’m struggling with the section of findKey().
Does anyone know the hint of this??
Here is my problems. What is “predicate is not a function”?

Screen Shot 2019-02-07 at 4.41.30.png3360×1764 984 KB

","
There seems to be nothing wrong with your code for findKey, although you have missed to add
return undefined;

after the for…in loop.
I am a bit suspicious though of the invoke rule for findKey() I see at the bottom of the code,
as you can see it calls findKey with a variable users and an object whilst find key calls for an object first and then a function.
This is my code for fndKey()
findKey (object, predicate) {
    // Check each key of object
    for(let key in object) {
      
      // Find the value of the object key
      let value = object[key];
      // Call the predicate function on the value of the object key
      let predicateReturnValue = predicate(value);
      
      // Check if the functions gives a truthy
      if (predicateReturnValue) {
        return key;
      };
    };
    
    // if the for...in loop gives no truthy values return undefined
    return undefined;
  
  },


I still can’t see the right way…
This is the object that I created before.
And you can see how to invoke findKey() on the previous image.
Could you give me any hints??


You don’t need to create an object at all and I am surprised to see you thought so, it is not in the instructions ;). The test/find-key.js runs and calls for the function findKey with its own values.
The reason why you are getting a predicate is not a function error is because the invoke section you call for findKey with two parameters both being objects… Whilst it expects an object and a function ;). Hence the error predicate is not a function. The error message even points out to line 93 saying something is wrong there.
Did you type that whole invoke section? It sure isn’t in mine ;). If so delete or Comment out that whole section run the test again. In the nodejs type:
node test/find-key.js

Hope it helps ;).

Thanks a lot!
Finally, I could pass the findKey().
I’ve misunderstood at the beginning of lodash. I should’ve read the instructions carefully…
Anyway, I appreciate it.

Owing to lack of time/space, the whole predicate thing likely throws a lot of learners off. Yes it is explained (as I recall) though what is not told is where is that predicate function?
The test contains it, that’s where. We should note that we can test this with any predicate of our own.
Once we build this method to work, it’s ours to use and re-use to our heart’s content. That’s the beauty of it. Pure utility.

HI.
I’m doing like bear27_yuta. I always do as a function on my own to check if it works first. I was thinking there is a sens to do like this. Make a first try, see if it works then check it on the termianl thru codecademy … is it bad ?

It’s all up to you, but the terminal test function is there for the purpose of testing  .

Hi
Can you please forward me the post where predicate is explained.
It is making me confuse becuase all the previouse exercises/methods we made, we were comapring or evaluating results from somthing. But here suddenly using Predicate.
How Predicate works, example or exercises.
Making findKey()? we didn’t provide any key in the parameters
I am trying to figure out why we need this method anyway if we are not providing any key parameter in this method, like
> findKey(object, key)
  Sorry i am lost here and investing alot of time on it. It will be great if you can somehow make this exercise more easy for me to understand, like realtime use of this with examples.
Kind Regards




 object8545111749:

please forward me the post where predicate is explained


I’m not sure where that would be found, but it’s not hard to understand what a predicate function is. It tests against a condition or state and returns true or false.
We don’t have to supply the function for this exercise. It is built into the test.
Our findKey method takes an object and a predicate function. The method iterates over the object and tests the value in the predicate function. If the outcome is true, the method returns the associated key.
"
50,Deeper understanding of event handler callback (Event types RGB random button color exercise),Get Help - Java,general,3,30,"
I am on this exercise:
https://www.codecademy.com/paths/web-development/tracks/build-interactive-websites/modules/dom-javascript-events/lessons/dom-events/exercises/dom-event-types
This is the complete code when I finished:  (it works)
// This variable stores the ""Pick a Color"" button
let button = document.getElementById('color-button');

// This variable stores the ""Mystery Color"" button
let mysteryButton = document.getElementById('next-button');

// This random number function that will creates color codes for the randomColor variable
function rgb(num) {
  return Math.floor(Math.random() * num);
}

// Write your code below
let colorChange = function (event) {
  let randomColor = 'rgb(' + rgb(255) + ',' + rgb(255) + ',' + rgb(255) + ')';
  event.target.style.backgroundColor = randomColor;
};

button.onclick = colorChange;

mysteryButton.onwheel = colorChange;


The point fo the code is, if either of 2 buttons are triggered it will change either button’s background color to a random hue.
So, near the bottom of the code, an onclick event on the ‘button’ will perform a callback on the function colorChange.
Then, that callback function creates a randomColor value and assigns it to the event’s target.
for onclick, the MDN website says: The function receives a mouse event object as its sole argument.
So, regarding:  let colorChange = function (event) {
is button.onclick = colorChange; sending a parameter ‘event’ to the callback function?
MDN says this argument is an object. What information does this object contain?
I’m just trying to understand this logic as fully as possible.
Also, could the line have been written as:
let colorChange = function (anyName) {     ,
as long as the statement inside was written as:
anyName.target.style.backgroundColor = randomColor;`  , correct?
And, finally, could the callback function have been defined using the => shorthand?
i.e.  let colorChange = (event) => {   ?
Thanks so much,
Chip
","



 board6993103169:

is button.onclick = colorChange; sending a parameter ‘event’ to the callback function?


Yes. It is the global object, event which among its properties has a target attribute that is bound to the DOM node that received the click.



 board6993103169:

What information does this object contain?


The object has a few dozen attributes. Event type is the one that matches to the click event, above. It also has all the details about the mouse, keyboard and other input devices, and methods to help with stuff like setting CSS style, etc.
We could try to write some script to let us inspect the object. Create a page with one button, and write the listener and handler. A ‘Button Clicked’ response is all we need to write back to the screen.
Also in the handler make a copy of the EventObject.
const eventObject = event    // ???
const code = document.createElement('code')
const text = document.createTextNode(eventObject)
code.append(text)
document.querySelector('body').appendChild(code)

Not tested, but you get the gist. Do this on your own machine.

Thank you for all of that. It helped clear up some things in my mind.
"
51,Lodash FindKey question - forEach instead of for...in,Get Help - Java,"learn-objects,general",3,34,"
Hello,
I am working through the Re-creating the Lodash Library and it’s going ok so far. I’ve come in segement 27-30 - findKey.
I understand the provided solutions uses a for…in loop as a solution. (correct presented answer)
  findKey(object, predicate) {
    for(let key in object) {
      let tempValue = object[key];
      let predicateReturnValue = predicate(tempValue);
      if(predicateReturnValue) { return key; }
    }
    return undefined;
  }

I am wondering why I cant use forEach instead? (alternative answer attemp)
   findKey(object, predicate) {
    object.forEach(key => {
      let tempValue = object[key];
      let predicateReturnValue = predicate(tempValue);
      if(predicateReturnValue) { return key; }
    });
    return undefined;
  }

This returns a console error when testing
TypeError: object.forEach is not a function

Even changing the parameters to something like object2, I still get that error. object.forEach is a function/method though
","
Read this;



Medium – 1 Apr 18



Ways to Loop Through Objects in JavaScript
Sometimes we may need to retrieve multiple pairs of data from an object. This article will briefly describe three ways that we can…
Reading time: 3 min read






Object.keys(object).forEach(key => {
	console.log(key);
}

I thought I would give this approach ago and it looked to be working mostly.
But found there is gotcha though using ForEach in this instance.
Annotation 2020-07-25 1342471600×676 35.7 KB
Running the tests always returned undefined even when it looked to be working.
Now read this;



Medium – 30 Mar 20



3 things you didn’t know about the forEach loop in JS
Do you think you know exactly how the forEach loop works in JS?
Reading time: 3 min read






It looks like because I cannot break out of the ForEach it will always return undefined as the last statement.
From the official MDN docs:

There is no way to  stop  or  break  a  forEach()  loop other than by throwing an exception. If you need such behavior, the  forEach()  method is the wrong tool.


Thank you.
That was a clear explanation of why forEach wont work in this instance.
"
52,Nested object,Get Help - Java,functions,5,40,"
Call your two functions with the  spaceship  object in the code editor, then  console.log()  the  spaceship  object to confirm those properties were changed/added.
For this particular task I thought
spaceship.greenEnergy();
spaceship.remotelyDisable();
console.log(spaceship):nested object1351×584 95.8 KB
is the right invoking but when I did as on the screen it got me right but still I could not understand why-----please explain thank you.
","
spaceship.greenEnergy() means invoke the method greenEnergy on the spaceship object which doesn’t exist in this case.
With greenEnergy(spaceship) this is a regular function which takes an object as an argument

You would use spaceship.greenEnergy() if greenEnergy() was a method that was included inside of the object spaceship. However in this case, greenEnergy() is just a regular function that takes an object as an input, therefore you use it as a regular function and use spaceship inside of the brackets.

thank you so much. I think i got it.

thank you for the clearing out. I got this now.
"
53,"JS: Team Stats project, why does an underscore do this?",Get Help - Java,general,4,28,"
Can someone explain the functionality of an underscore? In the Team Stats project. I set the properties to be _games and _players
I then created my getter methods, defining them as get _games and get _players. However this seemed to create an endless loop.
RangeError: Maximum call stack size exceeded
    at Object.get _players [as _players] (c:\Users\munro\Documents\Codecademy Projects\TeamStats\app.js:36:18)
    at Object.get _players [as _players] (c:\Users\munro\Documents\Codecademy Projects\TeamStats\app.js:37:21)
    at Object.get _players [as _players] (c:\Users\munro\Documents\Codecademy Projects\TeamStats\app.js:37:21)
    at Object.get _players [as _players] (c:\Users\munro\Documents\Codecademy Projects\TeamStats\app.js:37:21)
    at Object.get _players [as _players] (c:\Users\munro\Documents\Codecademy Projects\TeamStats\app.js:37:21)
    at Object.get _players [as _players] (c:\Users\munro\Documents\Codecademy Projects\TeamStats\app.js:37:21)
    at Object.get _players [as _players] (c:\Users\munro\Documents\Codecademy Projects\TeamStats\app.js:37:21)
    at Object.get _players [as _players] (c:\Users\munro\Documents\Codecademy Projects\TeamStats\app.js:37:21)
    at Object.get _players [as _players] (c:\Users\munro\Documents\Codecademy Projects\TeamStats\app.js:37:21)
    at Object.get _players [as _players] (c:\Users\munro\Documents\Codecademy Projects\TeamStats\app.js:37:21)

Changing the method name to get games and get players returned the expected array. I’m just wondering why the underscore caused that range error? I thought an underscore only had a cosmetic effect in that it lets people reading the code know to not modify that property.
","
giving the property the same name as the getter will lead to the getter endlessly calling itself. Has recursion for function already been explained? That is also what is happening with the getter.
this:
myObj = {
  a: 3,
  get b()
  { 
     return this.a;
  }
}

console.log(myObj.b)

is valid syntax. But very confusing. getter named b return property a. Confusing. And you don’t instantly see that a uses a getter (especially if the object contains more properties).
so the underscore is pretty useful convention.
But we always have to avoid the recursion.

Ah k that’s helpful to know thanks. Does JS prioritise methods over (non-method) properties?
I initially had:
const team = {
  _players: [],
  get _players () {
        return team._players;
    }
}

Which resulted in the loop. I’ve now had it changed to:
const team = {
  _players: [],
  get players () {
        return this._players;
    }
}

But just wondering.

getters are special, according to mdn:
The get syntax binds an object property to a function that will be called when that property is looked up.
so yes, the case getters, doing:
  get _players () {
        return team._players;
    }

because team._players (or this._players) will attempt to look up the property. But because of the binding, the getter will called. Which leads to recursion (a function endlessly invoking itself).
"
54,Hoisting,Get Help - Java,"functions,general",3,23,"
I’m confused about hoisting. At the learn  path of functions in codecademy it said that hoisting isn’t considered a good practice, I’ve had some doubts about it so I investigated a little further and everyone said that calling a function before it is declared its actually a good practice because it gives readability to the code, so Im a little bit confused about it.
","
I found this, maybe it helps?



Jennifer Bland – 10 Apr 15



How Hoisting in JavaScript Can Cause Unexpected Results
Your can experience unexpected results in your JavaScript programs due to execution that does not occur like you expected. A good example of this is that you can actually use a variable in JavaScri…






Hello @esisjesus, welcome to the forums!



 esisjesus:

I’ve had some doubts about it so I investigated a little further and everyone said that calling a function before it is declared its actually a good practice


As well as what @irlfede said,  if you call a function before you declare it, and you have a large program, then any other developers that have to look at your code will have to look through lots of code (possibly), before they find the function that is being called:
let someVar = someFun();
//20 lines of code
function someFun() {
return ""Imagine looking through 20 lines of code for this."";
}

Hoisting isn’t present in many other languages, which means that is devs mostly work in one language (Python, for instance), then they may get confused.
I hope this helps!
"
55,What am I supposed to find from the documentation?,Get Help - Java,introduction,3,76,"
I’m new to JavaScript, but when it hits the instructions:
"" Find a method on the [JavaScript Math  object] that returns the smallest integer greater than or equal to a decimal number.
Use this method with the number  43.8 . Log the answer to the console.""

This apparently explains how to do: console.log(Math.ceil(43.8));

Which I think it clearly doesn’t (Whats with the hint being .ceil rather than it actually being a part of an example, or part of the instructions itself?) Codecademy wants me to find my own method, but when I click the link I have no idea where to start. Then it says it wants specifically .ceil
As a complete noob it would be much better to see clearer instructions, as codecademy is my only resource for learning right now.
","



 thegethprogram:

Codecademy wants me to find my own method, but when I click the link I have no idea where to start.


This would suggest scroll down through the definitions until you find the explanation that matches exactly the text given in the narrative.
The ceiling of 0 is 0. The ceiling of 14.0 is 14. The ceiling of 0.1 is 1 and ceiling of 14.1 is 15. Does that help the explanation sink in?

It’s not just you. I’m a beginner myself and my lesson hit a complete wall on this page. There’s really no clear explanation as to what you are even looking for. I understand problem solving is a big part of it but this is really confusing. Sucks because all of the other courses on codecademy are great.
"
56,Meal Maker: Cannot read property 'length' of undefined,Get Help - Java,,6,512,"
For some reason i get Cannot read property ‘length’ of undefined
i tried a little to find out where the problem can be solved, but can’t find it.
this is my code
const menu = {
  _courses: {
    appetizers: [],
    mains: [],
    desserts: [],
  },
		
  get appetizers() {
    return this._courses.appetizers;
  },
  get mains() {
    return this._courses.mains;
  },
  get desserts() {
    return this._courses.desserts;
  },
  set appetizers(appetizers) {
    this._courses.appetizers = appetizers;
  },
  set mains(mains) {
    this._courses.mains = mains;
  },
  set desserts(desserts) {
    this._courses.desserts = desserts;
  },
  get courses() {
    return {
      appetizers: this.appetizers,
      mains: this.mains,
      desserts: this.desserts,
    };
  },
  
  addDishToCourse (courseName, dishName, dishPrice) {
    const dish = {
      name: dishName,
      price: dishPrice,
    };
    return this._courses[courseName].push(dish);
  },
  
  getRandomDishFromCourse (courseName) {
   const dishes = this._courses[courseName];
   const randomIndex = Math.floor(Math.random() * dishes.length);
   return dishes[randomIndex];
  },
  
  generateRandomMeal () {
    const appetizer = this.getRandomDishFromCourse('appetizer');
    const main = this.getRandomDishFromCourse('main');
    const dessert = this.getRandomDishFromCourse('dessert');
    const totalPrice = appetizer.price + main.price + dessert.price;
    return `Your meal is ${appetizer.name}, ${main.name}, ${dessert.name}, and the total price is ${totalPrice}.`;
  }
};
menu.addDishToCourse('appetizers', 'salad', 4.00);
menu.addDishToCourse('appetizers', 'wings', 4.50);
menu.addDishToCourse('appetizers', 'fries', 5.00);

menu.addDishToCourse('mains', 'beef', 12.75);
menu.addDishToCourse('mains', 'sparerib', 11.50);
menu.addDishToCourse('mains', 'pork', 11.50);

menu.addDishToCourse('desserts', 'Irish Coffe', 7.50);
menu.addDishToCourse('desserts', 'creme brullee', 6.00);
menu.addDishToCourse('desserts', 'ice cream', 5.00);

const meal = menu.generateRandomMeal();
console.log(meal)

and this is the error i get
/home/ccuser/workspace/learn-javascript-objects-meal-maker/app.js:44
const randomIndex = Math.floor(Math.random() * dishes.length);
^
TypeError: Cannot read property ‘length’ of undefined
at Object.getRandomDishFromCourse (/home/ccuser/workspace/learn-javascript-objects-meal-maker/app.js:44:57)
at Object.generateRandomMeal (/home/ccuser/workspace/learn-javascript-objects-meal-maker/app.js:49:28)
at Object. (/home/ccuser/workspace/learn-javascript-objects-meal-maker/app.js:68:19)
at Module._compile (module.js:571:32)
at Object.Module._extensions…js (module.js:580:10)
at Module.load (module.js:488:32)
at tryModuleLoad (module.js:447:12)
at Function.Module._load (module.js:439:3)
at Module.runMain (module.js:605:10)
at run (bootstrap_node.js:427:7)
can someone help me?
Thanks.
","
i’ve found the problem at: generateRadomMeal i missed the letter S after appetizer, main and dessert.
now my code is working 

Thanks for sharing! I was also stuck at the same problem ahahah

I went through an error three times on this project. Exact same problem I’m dead

this worked for me ! thanks.

Lol same issue I had, I kept spelling ‘appetizers’ differently, it would be either appertizer or appetizers
"
57,Help,Get Help - Java,general,3,43,"
im trying to learn how to code but stuck on the first project for game developing and it keeps saying my Fahrenheit is undefined ???
// convert tempature in kelvin degrees

const kelvin = 0;

//converting kelvin to celsius

const celsius = kelvin - 273;

// convert celsius to fahrenheit

let fahrenheit = celsius * (9/5) + 32;

//round down fahrenheit variable

fahrenheit = Math.floor(fahrenheit);

console.log(`The tempature is ${fahrennheit}degrees Fahrenheit.`);

//conver to Newton

let newton = celsius * (33/100);

//Round down

newton = Math.floor(newton);

console.log(`The temature is ${newtond}egrees Newton.`);

","
Hello, @blog8917374394, and welcome to the forums.



 blog8917374394:

console.log( `The tempature is ${fahrennheit}degrees Fahrenheit.` );



Are you sure the error doesn’t say that fahrennheit is undefined? You’ve defined fahrenheit here:
let fahrenheit = celsius * (9/5) + 32;

But, I see no definition for fahrennheit. 
Also, for future posts, please review How do I format code in my posts? Following these guidelines will allow your code to look as it does now after I edited your post.

After checking @midlindner’s reply, make sure you add a space between ${fahrennheit}  (which contains an error) and the next word.
Otherwise, the sentence will log (after you correct the error)
The tempature is 92degrees Fahrenheit.
Make sure you provide a descriptive title as well on your post. This can help people discover your post better.
"
58,Build a library project error #9000,Get Help - Java,learn-classes,4,42,"
Hello all!
This is my first question here, so I hope I will write everything clear.
I have been doing this project with walkthrough and I think I did everything exactly the same. Nevertheless, my code is not working. It constantly throws an error #9000
I have been trying to solve it for a couple of hours and it’s killing me, hense this question! 
let me post my code here + the complete link.


gist.github.com


https://gist.github.com/codecademydev/9dffd0f9b7f3be3fbea86be3a4450c73
app.js
class Media {
  constructor(title) {
    this._title = title;
    this._isCheckedOut = false;
    this._ratings = [];
  }
  get title() {
    return this._title;
  }
  get isCheckedOut() {
This file has been truncated. show original







class Media {

  constructor(title) {

    this._title = title;

    this._isCheckedOut = false;

    this._ratings = [];

  }

  get title() {

    return this._title;

  }

  get isCheckedOut() {

    return this._isCheckedOut;

  }

  get ratings() {

    return this._ratings;

  }

  set isCheckedOut(newIsCheckedOut) {

    this._isCheckedOut = newIsCheckedOut;

  }

  

  toggleCheckOutStatus() {

    this.isCheckedOut = !this.isCheckedOut;

  }

  getAverageRating() {

   let ratingSum = this.ratings.reduce((accumulator, rating) => accumulator + rating);

   return ratingSum / this.rating.length;

  }

  addRating(value) {

    this.rating.push(value);

  }

}

class Book extends Media () {

  constructor(author, title, pages) {

    super(title)

    this._author = author;

    this._pages = pages;

  }

  get author() {

    return this._author;

  }

  get pages() {

    return this._pages;

  }

}

and this is the error
class Movie extends Media() {
                    ^

TypeError: Class constructor Media cannot be invoked without 'new'
    at Object.<anonymous>

thank you for assisting. Have a nice day.
","
Hi, could you paste a link to said project?

of course 
https://www.codecademy.com/courses/introduction-to-javascript/projects/build-a-library




 polinashakirova13631:

class Movie extends Media() {


Leave off the parens. We don’t want to invoke a function in the signature line.
"
59,"Meal Maker Issue: cannot read property push of ""undefined""",Get Help - Java,learn-objects,4,43,"
Greetings. I have the following issue with the code. I have tried changing square braces for parenthesis, tried using both parenthesis and square braces and so on. Can’t seem to find why my code is not detecting de constant “dishes”
let menu = {
  _courses: {
    appetizers:[],
    mains: [],
    desserts:[],
  },
    
    get appetizers(){
      return this._courses.appetizers;
    },

    set appetizers(appetizersIn){
      this._courses.appetizers = appetizersIn; 
    },

    get mains(){
      return this._courses.mains;
    },
    
    set mains(mainsIn){
      this._courses.mains = mainsIn;
    },

    get desserts (){
      return this._courses.desserts;
    },

    set desserts(dessertsIn){
      this._courses.desserts = dessertsIn;
    },

    get courses(){
      return {
        appetizers: this.appetizers,
        mains: this.mains,
        desserts: this.desserts,
      };
    },
  addDishToCourse(courseName, dishName, dishPrice){
    const dish = {
      name: dishName,
      price: dishPrice,
    };
    return this._courses[courseName].push(dish);
  },
  getRandomDishFromCourse(courseName){
    let dishes = this.courses[courseName];
    const randomNum = Math.floor(Math.random() * dishes.length);
    return dishes[randomNum];
  },

  generateRandomMeal(){
    const appetizer = this.getRandomDishFromCourse('appetizer');
    const main = this.getRandomDishFromCourse('main');
    const dessert = this.getRandomDishFromCourse('dessert');
    const totalPrice = appetizer.price + main.price + dessert.price;
    return `The meal of the day is: ${appetizer} as appetizer ${main} as the main dish, and ${dessert} for dessert`;
  },
};

menu.addDishToCourse('appetizer', 'fries', 4.50);
menu.addDishToCourse('appetizer', 'chicken strips', 5.00);
menu.addDishToCourse('appetizer', 'salad', 3.00);
menu.addDishToCourse('appetizer', 'shrimps', 7.50);
menu.addDishToCourse('appetizer', 'fried plantain', 5.50);
menu.addDishToCourse('appetizer', 'fried yucca', 3.75);

menu.addDishToCourse('main', 'burger', 5.00);
menu.addDishToCourse('main', 'steak', 4.75);
menu.addDishToCourse('main', 'fish', 6.50);
menu.addDishToCourse('main', 'burrito', 4.50);
menu.addDishToCourse('main', 'pasta', 5.25);
menu.addDishToCourse('main', 'soup', 3.75);

menu.addDishToCourse('dessert', 'icecream', 4.75);
menu.addDishToCourse('dessert', 'brownie', 5.00);
menu.addDishToCourse('dessert', 'tiramisu', 7.75);
menu.addDishToCourse('dessert', 'cake piece', 6.50);
menu.addDishToCourse('dessert', 'smores', 5.62);
menu.addDishToCourse('dessert', 'flavored jelly', 3.25);

const meal = menu.generateRandomMeal();
console.log(meal);

The error says cannot read property “push” of undefined. I am not sure what I did wrong in this scenario.
","
This is the bit of code you should consider:
  addDishToCourse(courseName, dishName, dishPrice){
    const dish = {
      name: dishName,
      price: dishPrice,
    };
    return this._courses[courseName].push(dish);
  }

If you’re pushing undefined, it has to do with something in the supply-chain for dish, right? Try checking your values there with console.logs. This might mean jumping around in your code to track the functions and all that.

Thank you @toastedpitabread for replying. However I found my mistake wasn’t even in that line of code.
I fixed the courseNames on these sections
 generateRandomMeal(){
    const appetizer = this.getRandomDishFromCourse('appetizers');
    const main = this.getRandomDishFromCourse('mains');
    const dessert = this.getRandomDishFromCourse('desserts');
    const totalPrice = appetizer.price + main.price + dessert.price;
    return `The meal of the day is: ${appetizer.dishName} as appetizer ${main.dishName} as the main dish, and ${dessert.dishName} for dessert`;
  },


and here
menu.addDishToCourse('appetizers', 'fries', 4.50);
menu.addDishToCourse('appetizers', 'chicken strips', 5.00);
menu.addDishToCourse('appetizers', 'salad', 3.00);
menu.addDishToCourse('appetizers', 'shrimps', 7.50);
menu.addDishToCourse('appetizers', 'fried plantain', 5.50);
menu.addDishToCourse('appetizers', 'fried yucca', 3.75);

menu.addDishToCourse('mains', 'burger', 5.00);
menu.addDishToCourse('mains', 'steak', 4.75);
menu.addDishToCourse('mains', 'fish', 6.50);
menu.addDishToCourse('mains', 'burrito', 4.50);
menu.addDishToCourse('mains', 'pasta', 5.25);
menu.addDishToCourse('mains', 'soup', 3.75);

menu.addDishToCourse('desserts', 'icecream', 4.75);
menu.addDishToCourse('desserts', 'brownie', 5.00);
menu.addDishToCourse('desserts', 'tiramisu', 7.75);
menu.addDishToCourse('desserts', 'cake piece', 6.50);
menu.addDishToCourse('desserts', 'smores', 5.62);
menu.addDishToCourse('desserts', 'flavored jelly', 3.25);

The only difference in those updated sections of code is that both are plural when they were singular compared to the last code. Turning both strings to plural made the code work like a charm. However, I don’t seem to find why these strings should be plural for the code to work. I think it has something to do with the name of our arrays at the beginning or because of the getters. but then I thought it wouldn’t make sense as these are how the objects are named. The way I understand it is that
something != ‘something’
I made my code work, but can’t figure out why.
Edit: I also added the dishName element so it could be read aswell.




 silvfang:

I think it has something to do with the name of our arrays at the beginning


Yes.
In this line:
return this._courses[courseName].push(dish); //aside: you don't actually need return

you are calling the .push method on this._courses[courseName] Where is courseName defined? It is one of the parameters of your function. When you call the function, and supply 'appetizer' as the argument instead of 'appetizers' what happens? You’ve already seen what happens. this._courses['appetizer'] is undefined (it doesn’t exist), so you get the error. this._courses['appetizers'], however, is defined in the code below along with this._courses['mains'] and this._courses['desserts']:
  _courses: {
    appetizers:[],
    mains: [],
    desserts:[],
  },

_courses is an object with properties named (keys) appetizers, mains and desserts. There are no keys appetizer, main or dessert.
"
